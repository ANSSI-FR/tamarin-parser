
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AROBA BANG COLON COLOREQUAL COLOUREQUAL COMMA CONJUNCTION DEFAULTNOISE_STRING DHRENOISE_STRING DISJUNCTION DOLLAR DOT DOUBLEQUOTE DUMMY EQUAL EQUIVALENT EXPONENTIAL FORGOTTEN_COMMENT FORMULASEP FORWARDARROW GOALARROW GOALTRIANGLE HASH HASH_QUOTED_HEXCOLOR HEURISTICORACLE HEXCOLOR HIGHER IDENT IDENTDOTNATURAL IMPLY ISFACTNAME_STRING ISINFACTTERMS_STRING KWDACCOUNT KWDACCOUNTS KWDALLTRACES KWDASYMMETRICENCRYPTION KWDATTACK KWDAXIOM KWDBACKWARDSEARCH KWDBEGIN KWDBILINEARPAIRING KWDBUILTINS KWDBY KWDCASE KWDCONTRADICTION KWDDEPRIO KWDDESTRUCTOR KWDDIFFIEHELLMAN KWDDIFFLEMMA KWDEND KWDEQUATIONS KWDEXISTS KWDEXISTSTRACE KWDFOR KWDFORALL KWDFUNCTIONS KWDHASHING KWDHEURISTIC KWDHEURISTICEQUAL KWDHIDELEMMAEQUAL KWDIN KWDINDUCTION KWDLAST KWDLEFT KWDLEMMA KWDLET KWDMIRRORED KWDMODULO KWDMULTISET KWDNEXT KWDNODE KWDNOPRECOMP KWDNOT KWDPREDICATE KWDPRESORT KWDPRIO KWDPRIVATE KWDQED KWDRESTRICTION KWDRESTRICTIONS KWDREUSE KWDREVEALINGSIGNING KWDRIGHT KWDRULE KWDRULEEQ KWDSIGNING KWDSIMPLIFY KWDSOLVE KWDSOLVED KWDSORRY KWDSOURCES KWDSPLITEQS KWDSTEP KWDSYMMETRICENCRYPTION KWDTACTIC KWDTEST KWDTHEORY KWDUNFINISHABLEDIFF KWDUSEINDUCTION KWDVARIANTS KWDXOR LACTIONFACTARROW LBRACE LBRACKET LFORMALCOMMENT LITERAL LITTLE0 LITTLE1 LITTLE2 LITTLE3 LITTLE4 LITTLE5 LITTLE6 LITTLE7 LITTLE8 LITTLE9 LOWER LPAREN MACRO_DEFINE MACRO_ELSE MACRO_ENDIF MACRO_IFDEF MACRO_INCLUDE MINUS MULTIPLY NATURAL NONABSURDGOAL_STRING OPXOR PLUS QUOTE QUOTED_HEXCOLOR RACTIONFACTARROW RBRACE RBRACKET REASONABLENONCESNOISE_STRING REGEX_STRING RFORMALCOMMENT RPAREN SECTION SLASH TILDE UNICONJUNCTION UNIDISJUNCTION UNIEQUIVALENT UNIEXISTS UNIFALSE UNIFORALL UNIIMPLY UNINOT UNITRUE XORSYMBOLsecurity_protocol_theory : KWDTHEORY IDENT KWDBEGIN body KWDENDbody : body body_itembody : body_itembody_item : signature_spec\n                | global_heuristic\n                | rule\n                | restriction\n                | tactic\n                | section\n                | macro\n                | axiom\n                | predicate\n                | lemma\n                | test\n                | diff_lemma\n                | forgotten_commenttest : KWDTEST IDENT COLON formula_start formula formula_endforgotten_comment : FORGOTTEN_COMMENTmacro : MACRO_INCLUDE\n             | MACRO_IFDEF\n             | MACRO_ELSE\n             | MACRO_ENDIF\n             | MACRO_DEFINEsection : SECTIONsignature_spec : functions\n                      | equations\n                      | builtinsfunctions : KWDFUNCTIONS COLON function_listfunction_list : function_list COMMA function_symfunction_list : function_symfunction_sym : IDENT SLASH arityfunction_sym : IDENT SLASH arity LBRACKET KWDPRIVATE RBRACKETfunction_sym : IDENT SLASH arity LBRACKET KWDDESTRUCTOR RBRACKETarity : NATURALequations : KWDEQUATIONS COLON equation_listequation_list : equation_list COMMA equationequation_list : equationequation : term EQUAL termbuiltins : KWDBUILTINS COLON builtin_listbuiltin_list : builtin_list COMMA builtinbuiltin_list : builtinbuiltin : KWDDIFFIEHELLMAN\n                 | KWDHASHING\n                 | KWDSYMMETRICENCRYPTION\n                 | KWDASYMMETRICENCRYPTION\n                 | KWDSIGNING\n                 | KWDBILINEARPAIRING\n                 | KWDXOR\n                 | KWDMULTISET\n                 | KWDREVEALINGSIGNINGglobal_heuristic : KWDHEURISTIC COLON goal_ranking_listgoal_ranking_list : goal_ranking_list standard_goal_rankinggoal_ranking_list : goal_ranking_list oracle_goal_rankinggoal_ranking_list : standard_goal_rankinggoal_ranking_list : oracle_goal_rankingstandard_goal_ranking : IDENToracle_goal_ranking : HEURISTICORACLErule : simple_rule\n          | simple_rule_variant\n          | diff_rulesimple_rule_variant : simple_rule variantsdiff_rule : simple_rule KWDLEFT rule KWDRIGHT rulesimple_rule : simple_rule_hdr simple_rule_bodysimple_rule_hdr : simple_rule_headersimple_rule_header : KWDRULE IDENT COLONsimple_rule_header : KWDRULE modulo IDENT COLONsimple_rule_header : KWDRULE IDENT rule_attrs COLONsimple_rule_header : KWDRULE modulo IDENT rule_attrs COLONsimple_rule_body : LBRACKET facts RBRACKET FORWARDARROW LBRACKET facts rbracket_reset_statesimple_rule_body : LBRACKET facts RBRACKET LACTIONFACTARROW facts RACTIONFACTARROW LBRACKET facts rbracket_reset_statesimple_rule_body : let_block LBRACKET facts RBRACKET FORWARDARROW LBRACKET facts rbracket_reset_statesimple_rule_body : let_block LBRACKET facts RBRACKET LACTIONFACTARROW facts RACTIONFACTARROW LBRACKET facts rbracket_reset_staterbracket_reset_state : RBRACKETvariants : KWDVARIANTS simple_rule_listsimple_rule_list : simple_rule_list COMMA simple_rulesimple_rule_list : simple_rulemodulo : LPAREN KWDMODULO IDENT RPARENrule_attrs : LBRACKET rule_attr_list RBRACKETrule_attr_list : rule_attr_list COMMA rule_attrrule_attr_list : rule_attrrule_attr : color_equal hexcolor\n                | colour_equal hexcolor\n                | color_equal quoted_hexcolor\n                | colour_equal quoted_hexcolorcolor_equal : COLOREQUALcolour_equal : COLOUREQUALhexcolor : HASH HEXCOLORhexcolor : HEXCOLORquoted_hexcolor : QUOTED_HEXCOLORquoted_hexcolor : HASH_QUOTED_HEXCOLORlet_block : KWDLET let_block_stmt_list KWDINlet_block_stmt_list : let_block_stmt_list let_block_stmtlet_block_stmt_list : let_block_stmtlet_block_stmt : msg_var EQUAL msettermmsg_var : IDENTmsg_var : IDENTDOTNATURALmsg_var : IDENT COLON IDENTmsg_var : IDENTDOTNATURAL COLON IDENTrestriction : KWDRESTRICTION IDENT COLON formula_start formula formula_endrestriction : KWDRESTRICTION IDENT restriction_attrs COLON formula_start formula formula_endrestriction : KWDRESTRICTIONS COLON restriction_listrestriction_list : restriction_list restriction_eltrestriction_list : restriction_eltrestriction_elt : formula_start formula formula_endrestriction_attrs : LBRACKET KWDLEFT RBRACKET\n                    | LBRACKET KWDRIGHT RBRACKETaxiom : KWDAXIOM IDENT COLON formula_start formula formula_endaxiom : KWDAXIOM IDENT LBRACKET KWDRIGHT RBRACKET COLON formula_start formula formula_end\n             | KWDAXIOM IDENT LBRACKET KWDLEFT RBRACKET COLON formula_start formula formula_endpredicate : KWDPREDICATE COLON formulalemma : lemma_header lemma_bodylemma : lemma_header lemma_acc lemma_bodylemma_header : KWDLEMMA IDENT COLONlemma_header : KWDLEMMA modulo IDENT COLONlemma_header : KWDLEMMA IDENT lemma_attrs COLONlemma_header : KWDLEMMA modulo IDENT lemma_attrs COLONlemma_header : KWDLEMMA IDENT COLON trace_quantifierlemma_header : KWDLEMMA modulo IDENT COLON trace_quantifierlemma_header : KWDLEMMA IDENT lemma_attrs COLON trace_quantifierlemma_header : KWDLEMMA modulo IDENT lemma_attrs COLON trace_quantifierlemma_acc : lemma_list KWDACCOUNT KWDFORlemma_acc : lemma_list KWDACCOUNTS KWDFORlemma_list : lemma_list COMMA IDENTlemma_list : IDENTlemma_body : formula_start formula formula_end proof_skeletonlemma_body : formula_start formula formula_endtrace_quantifier : KWDALLTRACES\n                      | KWDEXISTSTRACElemma_attrs : LBRACKET lemma_attr_list RBRACKETlemma_attr_list : lemma_attr_list COMMA lemma_attrlemma_attr_list : lemma_attrlemma_attr : lemma_attr_contentlemma_attr_content : KWDSOURCES\n                | KWDREUSE\n                | KWDUSEINDUCTION\n                | KWDLEFT\n                | KWDRIGHTlemma_attr_content : KWDHIDELEMMAEQUAL IDENTlemma_attr_content : KWDHEURISTICEQUAL lemma_goal_rankingslemma_goal_rankings : LBRACE lemma_goal_ranking_list RBRACElemma_goal_rankings : oracle_goal_rankinglemma_goal_ranking_list : lemma_goal_ranking_list COMMA lemma_goal_rankinglemma_goal_ranking_list : lemma_goal_rankinglemma_goal_ranking : IDENTproof_skeleton : KWDSOLVEDproof_skeleton : KWDBY proof_methodproof_skeleton : proof_method proof_skeletonproof_skeleton : proof_method KWDCASE IDENT proof_skeleton\n                      | proof_method KWDCASE NATURAL proof_skeletonproof_skeleton : proof_method KWDCASE IDENT proof_skeleton proof_skeleton_inner_list\n                      | proof_method KWDCASE NATURAL proof_skeleton proof_skeleton_inner_listproof_skeleton : proof_method KWDCASE IDENT proof_skeleton KWDQED\n                      | proof_method KWDCASE NATURAL proof_skeleton KWDQEDproof_skeleton : proof_method KWDCASE IDENT proof_skeleton proof_skeleton_inner_list KWDQED\n                      | proof_method KWDCASE NATURAL proof_skeleton proof_skeleton_inner_list KWDQEDproof_skeleton_inner_list : proof_skeleton_inner_list proof_skeleton_inner_eltproof_skeleton_inner_list : proof_skeleton_inner_eltproof_skeleton_inner_elt : KWDNEXT KWDCASE IDENT proof_skeleton \n                              | KWDNEXT KWDCASE IDENT proof_skeleton KWDQED\n                              | KWDNEXT KWDCASE NATURAL proof_skeleton\n                              | KWDNEXT KWDCASE NATURAL proof_skeleton KWDQEDproof_method : KWDSORRY\n                    | KWDSIMPLIFY\n                    | KWDSOLVE LPAREN goal RPAREN\n                    | KWDCONTRADICTION\n                    | KWDINDUCTIONdiff_lemma : KWDDIFFLEMMA IDENT COLON diff_proof_skeletondiff_lemma : KWDDIFFLEMMA IDENT lemma_attrs COLON diff_proof_skeletondiff_proof_method : KWDSORRY\n                    | KWDRULEEQ\n                    | KWDBACKWARDSEARCH\n                    | KWDATTACK\n                    | KWDUNFINISHABLEDIFF\n                    | KWDSTEP LPAREN proof_method RPARENdiff_proof_skeleton : KWDMIRROREDdiff_proof_skeleton : KWDBY diff_proof_methoddiff_proof_skeleton : diff_proof_method diff_proof_skeletondiff_proof_skeleton : diff_proof_method KWDCASE IDENT diff_proof_skeleton\n                           | diff_proof_method KWDCASE NATURAL diff_proof_skeletondiff_proof_skeleton : diff_proof_method KWDCASE IDENT diff_proof_skeleton KWDQED\n                           | diff_proof_method KWDCASE NATURAL diff_proof_skeleton KWDQEDdiff_proof_skeleton : diff_proof_method KWDCASE IDENT diff_proof_skeleton diff_proof_skeleton_inner_list\n                           | diff_proof_method KWDCASE NATURAL diff_proof_skeleton diff_proof_skeleton_inner_listdiff_proof_skeleton : diff_proof_method KWDCASE IDENT diff_proof_skeleton diff_proof_skeleton_inner_list KWDQED\n                           | diff_proof_method KWDCASE NATURAL diff_proof_skeleton diff_proof_skeleton_inner_list KWDQEDdiff_proof_skeleton_inner_list : diff_proof_skeleton_inner_list diff_proof_skeleton_inner_eltdiff_proof_skeleton_inner_list : diff_proof_skeleton_inner_eltdiff_proof_skeleton_inner_elt : KWDNEXT KWDCASE IDENT diff_proof_skeleton \n                              | KWDNEXT KWDCASE IDENT diff_proof_skeleton KWDQED\n                              | KWDNEXT KWDCASE NATURAL diff_proof_skeleton\n                              | KWDNEXT KWDCASE NATURAL diff_proof_skeleton KWDQEDgoal : fact GOALTRIANGLE natural_sub node_vargoal : fact AROBA node_vargoal : LPAREN node_var COMMA natural RPAREN GOALARROW LPAREN node_var COMMA natural RPARENgoal : formula_listgoal : KWDSPLITEQS LPAREN natural RPARENformula_list : formula_list FORMULASEP formulaformula_list : formulanode_var : HASH IDENTnode_var : IDENTnode_var : IDENTDOTNATURALnode_var : IDENTDOTNATURAL COLON KWDNODEnode_var : IDENT COLON KWDNODEnode_var : HASH IDENTDOTNATURALnode_var : NATURALnatural : NATURALnatural_sub : natural_sub little_digitnatural_sub : little_digitlittle_digit : LITTLE0\n                    | LITTLE1\n                    | LITTLE2\n                    | LITTLE3\n                    | LITTLE4\n                    | LITTLE5\n                    | LITTLE6\n                    | LITTLE7\n                    | LITTLE8\n                    | LITTLE9tupleterm : LOWER msetterm_list HIGHERmsetterm_list : msetterm_list COMMA msetterm\n                    | msettermmsetterm : xorterm_listxorterm_list : xorterm_list PLUS xorterm\n                    | xortermxorterm : multterm_listmultterm_list : multterm_list OPXOR multterm\n                    | multterm_list XORSYMBOL multterm\n                    | multtermmultterm : expterm_listexpterm_list : expterm_list MULTIPLY expterm\n                    | exptermexpterm : term_listterm_list : term_list EXPONENTIAL term\n                    | termterm : tupleterm\n            | LPAREN msetterm_list RPAREN\n            | nullary_fun\n            | binary_app\n            | nary_app\n            | literalnullary_fun : IDENTbinary_app : binary_fun LBRACE msetterm_list RBRACE termbinary_fun : IDENTnary_app : nary_fun LPAREN RPAREN\n                | nary_fun LPAREN msetterm_list RPARENnary_fun : IDENTliteral : LITERALliteral : TILDE LITERALliteral : nonnode_varnonnode_var : IDENTnonnode_var : DOLLAR IDENTnonnode_var : IDENTDOTNATURALnonnode_var : DOLLAR IDENTDOTNATURALnonnode_var : DOLLAR NATURALnonnode_var : IDENT COLON IDENTnonnode_var : IDENTDOTNATURAL COLON IDENTnonnode_var : TILDE IDENTnonnode_var : TILDE IDENTDOTNATURALnonnode_var : msg_varnonnode_var : NATURALfacts : facts COMMA factfacts : fact\n            | emptyempty : fact : IDENT LPAREN RPARENfact : BANG IDENT LPAREN RPARENfact : IDENT LPAREN msetterm_list RPARENfact : BANG IDENT LPAREN msetterm_list RPARENfact : IDENT LPAREN RPAREN fact_annotesfact : BANG IDENT LPAREN RPAREN fact_annotesfact : IDENT LPAREN msetterm_list RPAREN fact_annotesfact : BANG IDENT LPAREN msetterm_list RPAREN fact_annotesfact_annotes : LBRACKET fact_annote_list RBRACKETfact_annote_list : fact_annote_list COMMA fact_annote\n                        | fact_annotefact_annote : PLUS\n                    | MINUS\n                    | KWDNOPRECOMPformula_start : DOUBLEQUOTEformula_end : DOUBLEQUOTEformula : impformula : imp EQUIVALENT impformula : imp UNIEQUIVALENT impimp : disjunctionimp : disjunction IMPLY impimp : disjunction UNIIMPLY impimp : disjunction IMPLY IDENTdisjunction : disjunction DISJUNCTION conjunction\n                | disjunction UNIDISJUNCTION conjunction\n                | conjunctionconjunction : conjunction CONJUNCTION negation\n                | conjunction UNICONJUNCTION negation\n                | negationnegation : atomnegation : KWDNOT atom\n                | UNINOT atomnegation : KWDNOT IDENT\n                | UNINOT IDENTnegation : KWDNOT LPAREN IDENT RPAREN\n                | UNINOT LPAREN IDENT RPARENatom : UNIFALSE\n           | UNITRUE\n           | IDENT\n           | NATURALatom : quant_formulaatom : LPAREN formula RPAREN\n            | KWDLAST LPAREN node_var RPARENatom : fact AROBA node_var\n           | node_var LOWER node_var\n           | msetterm EQUAL msetterm\n           | node_var EQUAL node_varquant_formula : quantifier lvar_list DOT formulalvar_list : lvar_list lvar\n              | lvarlvar : nonnode_var\n            | node_varquantifier : KWDEXISTS\n                 | UNIEXISTS\n                 | KWDFORALL\n                 | UNIFORALLtactic : tactic_hdr tactic_contenttactic : tactic_hdr presort tactic_contenttactic_hdr : KWDTACTIC COLON IDENTpresort : KWDPRESORT COLON standard_goal_rankingtactic_content : prio_listtactic_content : deprio_listtactic_content : prio_list deprio_listprio_list : prio_list prio\n                | priodeprio_list : deprio_list deprio\n                   | deprioprio : KWDPRIO COLON tactic_function_listprio : KWDPRIO COLON LBRACE post_ranking RBRACE tactic_function_listdeprio : KWDDEPRIO COLON tactic_function_listdeprio : KWDDEPRIO COLON LBRACE post_ranking RBRACE tactic_function_listpost_ranking : IDENTtactic_function_list : tactic_function_list tactic_function\n                  | tactic_functiontactic_function : and_function_listand_function_list : and_function_list DISJUNCTION and_function\n                        | and_functionand_function : not_function_listnot_function_list : not_function_list CONJUNCTION not_function\n                        | not_functionnot_function : function_and_paramsnot_function : KWDNOT function_and_paramsfunction_and_params : REGEX_STRING\n                   | ISFACTNAME_STRING\n                   | ISINFACTTERMS_STRING\n                   | DHRENOISE_STRING\n                   | DEFAULTNOISE_STRING\n                   | REASONABLENONCESNOISE_STRING\n                   | NONABSURDGOAL_STRING'
    
_lr_action_items = {'KWDTHEORY':([0,],[2,]),'$end':([1,50,],[0,-1,]),'IDENT':([2,27,36,38,39,40,47,49,52,68,71,73,77,78,81,83,84,86,89,90,91,92,93,94,103,108,120,121,122,130,132,133,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,155,156,157,158,159,164,175,176,177,178,194,195,196,201,204,209,210,213,221,237,238,241,242,243,244,245,246,247,248,249,250,253,256,260,261,262,263,266,267,268,269,270,271,272,273,274,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,297,317,319,321,322,323,324,327,330,331,332,333,334,335,336,337,338,353,376,377,383,384,392,394,395,396,397,398,399,400,401,402,403,404,405,407,421,428,437,440,443,444,445,446,479,480,483,484,494,497,498,504,505,514,517,528,533,547,548,561,574,575,576,577,578,579,580,581,582,583,584,585,592,596,599,603,622,],[3,56,67,74,75,76,85,88,93,116,116,-279,171,176,193,198,200,203,208,93,-54,-55,-56,-57,116,93,252,255,116,176,271,275,276,-222,-317,-318,-319,-320,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,287,-249,289,-259,296,176,-95,-96,-260,193,198,-93,-113,340,-52,-53,116,359,359,116,116,116,370,116,116,116,176,376,116,116,380,381,386,386,386,386,176,271,-314,-315,-316,-95,-96,-205,287,-199,-204,400,176,176,176,176,176,176,176,-248,-257,-258,-251,-253,-254,116,426,171,176,176,376,400,193,-92,176,441,442,-117,-127,-128,-115,-114,116,-97,-203,-236,176,-219,116,-313,376,400,176,-202,-98,-223,-226,-227,-230,-233,-244,486,492,193,-94,-119,-118,-116,-77,176,-245,515,522,193,193,-120,116,116,-242,543,492,193,386,116,193,386,-208,-209,-210,-211,-212,-213,-214,-215,-216,-217,-218,605,193,609,-207,386,]),'KWDBEGIN':([3,],[4,]),'KWDHEURISTIC':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,30,31,32,33,34,35,41,51,53,58,60,61,63,64,69,80,90,91,92,93,94,96,97,101,102,104,105,106,107,113,114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,160,169,170,172,173,176,177,178,179,180,181,182,183,184,185,186,187,188,189,209,210,217,220,222,223,224,225,226,227,229,230,231,232,233,234,235,236,251,252,254,255,276,277,286,287,288,289,290,291,292,293,298,299,302,303,304,305,306,350,351,356,357,362,367,368,369,370,371,372,373,376,377,378,379,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,409,410,413,414,416,417,419,420,423,430,431,432,433,434,435,458,461,462,464,470,471,473,476,480,481,482,485,501,502,503,514,524,525,526,540,541,545,550,551,552,554,555,557,558,559,560,564,565,567,568,569,571,572,590,591,593,595,597,598,600,607,612,613,614,615,616,618,619,620,621,],[23,23,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-26,-27,-58,-59,-60,-24,-19,-20,-21,-22,-23,-18,-2,-61,-321,-325,-326,-329,-331,-111,-63,-51,-54,-55,-56,-57,-74,-76,-101,-103,-322,-327,-328,-330,-110,-281,-284,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-112,-28,-30,-35,-37,-95,-96,-260,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-102,-332,-338,-339,-341,-342,-344,-345,-347,-348,-349,-350,-351,-352,-353,-334,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-126,-280,-167,-175,-169,-170,-171,-172,-173,-62,-75,-104,-337,-346,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-125,-145,-162,-163,-165,-166,-176,-177,-168,-29,-31,-34,-36,-38,-40,-99,-340,-343,-107,-299,-300,-307,-312,-245,-146,-147,-17,-100,-333,-335,-242,-178,-179,-174,-148,-149,-164,-180,-182,-187,-181,-183,-32,-33,-73,-69,-108,-109,-150,-152,-157,-151,-153,-184,-186,-185,-71,-154,-156,-155,-70,-188,-190,-72,-158,-160,-189,-191,-159,-161,]),'KWDRESTRICTION':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,30,31,32,33,34,35,41,51,53,58,60,61,63,64,69,80,90,91,92,93,94,96,97,101,102,104,105,106,107,113,114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,160,169,170,172,173,176,177,178,179,180,181,182,183,184,185,186,187,188,189,209,210,217,220,222,223,224,225,226,227,229,230,231,232,233,234,235,236,251,252,254,255,276,277,286,287,288,289,290,291,292,293,298,299,302,303,304,305,306,350,351,356,357,362,367,368,369,370,371,372,373,376,377,378,379,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,409,410,413,414,416,417,419,420,423,430,431,432,433,434,435,458,461,462,464,470,471,473,476,480,481,482,485,501,502,503,514,524,525,526,540,541,545,550,551,552,554,555,557,558,559,560,564,565,567,568,569,571,572,590,591,593,595,597,598,600,607,612,613,614,615,616,618,619,620,621,],[27,27,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-26,-27,-58,-59,-60,-24,-19,-20,-21,-22,-23,-18,-2,-61,-321,-325,-326,-329,-331,-111,-63,-51,-54,-55,-56,-57,-74,-76,-101,-103,-322,-327,-328,-330,-110,-281,-284,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-112,-28,-30,-35,-37,-95,-96,-260,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-102,-332,-338,-339,-341,-342,-344,-345,-347,-348,-349,-350,-351,-352,-353,-334,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-126,-280,-167,-175,-169,-170,-171,-172,-173,-62,-75,-104,-337,-346,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-125,-145,-162,-163,-165,-166,-176,-177,-168,-29,-31,-34,-36,-38,-40,-99,-340,-343,-107,-299,-300,-307,-312,-245,-146,-147,-17,-100,-333,-335,-242,-178,-179,-174,-148,-149,-164,-180,-182,-187,-181,-183,-32,-33,-73,-69,-108,-109,-150,-152,-157,-151,-153,-184,-186,-185,-71,-154,-156,-155,-70,-188,-190,-72,-158,-160,-189,-191,-159,-161,]),'KWDRESTRICTIONS':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,30,31,32,33,34,35,41,51,53,58,60,61,63,64,69,80,90,91,92,93,94,96,97,101,102,104,105,106,107,113,114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,160,169,170,172,173,176,177,178,179,180,181,182,183,184,185,186,187,188,189,209,210,217,220,222,223,224,225,226,227,229,230,231,232,233,234,235,236,251,252,254,255,276,277,286,287,288,289,290,291,292,293,298,299,302,303,304,305,306,350,351,356,357,362,367,368,369,370,371,372,373,376,377,378,379,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,409,410,413,414,416,417,419,420,423,430,431,432,433,434,435,458,461,462,464,470,471,473,476,480,481,482,485,501,502,503,514,524,525,526,540,541,545,550,551,552,554,555,557,558,559,560,564,565,567,568,569,571,572,590,591,593,595,597,598,600,607,612,613,614,615,616,618,619,620,621,],[28,28,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-26,-27,-58,-59,-60,-24,-19,-20,-21,-22,-23,-18,-2,-61,-321,-325,-326,-329,-331,-111,-63,-51,-54,-55,-56,-57,-74,-76,-101,-103,-322,-327,-328,-330,-110,-281,-284,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-112,-28,-30,-35,-37,-95,-96,-260,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-102,-332,-338,-339,-341,-342,-344,-345,-347,-348,-349,-350,-351,-352,-353,-334,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-126,-280,-167,-175,-169,-170,-171,-172,-173,-62,-75,-104,-337,-346,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-125,-145,-162,-163,-165,-166,-176,-177,-168,-29,-31,-34,-36,-38,-40,-99,-340,-343,-107,-299,-300,-307,-312,-245,-146,-147,-17,-100,-333,-335,-242,-178,-179,-174,-148,-149,-164,-180,-182,-187,-181,-183,-32,-33,-73,-69,-108,-109,-150,-152,-157,-151,-153,-184,-186,-185,-71,-154,-156,-155,-70,-188,-190,-72,-158,-160,-189,-191,-159,-161,]),'SECTION':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,30,31,32,33,34,35,41,51,53,58,60,61,63,64,69,80,90,91,92,93,94,96,97,101,102,104,105,106,107,113,114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,160,169,170,172,173,176,177,178,179,180,181,182,183,184,185,186,187,188,189,209,210,217,220,222,223,224,225,226,227,229,230,231,232,233,234,235,236,251,252,254,255,276,277,286,287,288,289,290,291,292,293,298,299,302,303,304,305,306,350,351,356,357,362,367,368,369,370,371,372,373,376,377,378,379,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,409,410,413,414,416,417,419,420,423,430,431,432,433,434,435,458,461,462,464,470,471,473,476,480,481,482,485,501,502,503,514,524,525,526,540,541,545,550,551,552,554,555,557,558,559,560,564,565,567,568,569,571,572,590,591,593,595,597,598,600,607,612,613,614,615,616,618,619,620,621,],[30,30,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-26,-27,-58,-59,-60,-24,-19,-20,-21,-22,-23,-18,-2,-61,-321,-325,-326,-329,-331,-111,-63,-51,-54,-55,-56,-57,-74,-76,-101,-103,-322,-327,-328,-330,-110,-281,-284,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-112,-28,-30,-35,-37,-95,-96,-260,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-102,-332,-338,-339,-341,-342,-344,-345,-347,-348,-349,-350,-351,-352,-353,-334,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-126,-280,-167,-175,-169,-170,-171,-172,-173,-62,-75,-104,-337,-346,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-125,-145,-162,-163,-165,-166,-176,-177,-168,-29,-31,-34,-36,-38,-40,-99,-340,-343,-107,-299,-300,-307,-312,-245,-146,-147,-17,-100,-333,-335,-242,-178,-179,-174,-148,-149,-164,-180,-182,-187,-181,-183,-32,-33,-73,-69,-108,-109,-150,-152,-157,-151,-153,-184,-186,-185,-71,-154,-156,-155,-70,-188,-190,-72,-158,-160,-189,-191,-159,-161,]),'MACRO_INCLUDE':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,30,31,32,33,34,35,41,51,53,58,60,61,63,64,69,80,90,91,92,93,94,96,97,101,102,104,105,106,107,113,114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,160,169,170,172,173,176,177,178,179,180,181,182,183,184,185,186,187,188,189,209,210,217,220,222,223,224,225,226,227,229,230,231,232,233,234,235,236,251,252,254,255,276,277,286,287,288,289,290,291,292,293,298,299,302,303,304,305,306,350,351,356,357,362,367,368,369,370,371,372,373,376,377,378,379,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,409,410,413,414,416,417,419,420,423,430,431,432,433,434,435,458,461,462,464,470,471,473,476,480,481,482,485,501,502,503,514,524,525,526,540,541,545,550,551,552,554,555,557,558,559,560,564,565,567,568,569,571,572,590,591,593,595,597,598,600,607,612,613,614,615,616,618,619,620,621,],[31,31,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-26,-27,-58,-59,-60,-24,-19,-20,-21,-22,-23,-18,-2,-61,-321,-325,-326,-329,-331,-111,-63,-51,-54,-55,-56,-57,-74,-76,-101,-103,-322,-327,-328,-330,-110,-281,-284,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-112,-28,-30,-35,-37,-95,-96,-260,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-102,-332,-338,-339,-341,-342,-344,-345,-347,-348,-349,-350,-351,-352,-353,-334,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-126,-280,-167,-175,-169,-170,-171,-172,-173,-62,-75,-104,-337,-346,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-125,-145,-162,-163,-165,-166,-176,-177,-168,-29,-31,-34,-36,-38,-40,-99,-340,-343,-107,-299,-300,-307,-312,-245,-146,-147,-17,-100,-333,-335,-242,-178,-179,-174,-148,-149,-164,-180,-182,-187,-181,-183,-32,-33,-73,-69,-108,-109,-150,-152,-157,-151,-153,-184,-186,-185,-71,-154,-156,-155,-70,-188,-190,-72,-158,-160,-189,-191,-159,-161,]),'MACRO_IFDEF':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,30,31,32,33,34,35,41,51,53,58,60,61,63,64,69,80,90,91,92,93,94,96,97,101,102,104,105,106,107,113,114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,160,169,170,172,173,176,177,178,179,180,181,182,183,184,185,186,187,188,189,209,210,217,220,222,223,224,225,226,227,229,230,231,232,233,234,235,236,251,252,254,255,276,277,286,287,288,289,290,291,292,293,298,299,302,303,304,305,306,350,351,356,357,362,367,368,369,370,371,372,373,376,377,378,379,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,409,410,413,414,416,417,419,420,423,430,431,432,433,434,435,458,461,462,464,470,471,473,476,480,481,482,485,501,502,503,514,524,525,526,540,541,545,550,551,552,554,555,557,558,559,560,564,565,567,568,569,571,572,590,591,593,595,597,598,600,607,612,613,614,615,616,618,619,620,621,],[32,32,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-26,-27,-58,-59,-60,-24,-19,-20,-21,-22,-23,-18,-2,-61,-321,-325,-326,-329,-331,-111,-63,-51,-54,-55,-56,-57,-74,-76,-101,-103,-322,-327,-328,-330,-110,-281,-284,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-112,-28,-30,-35,-37,-95,-96,-260,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-102,-332,-338,-339,-341,-342,-344,-345,-347,-348,-349,-350,-351,-352,-353,-334,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-126,-280,-167,-175,-169,-170,-171,-172,-173,-62,-75,-104,-337,-346,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-125,-145,-162,-163,-165,-166,-176,-177,-168,-29,-31,-34,-36,-38,-40,-99,-340,-343,-107,-299,-300,-307,-312,-245,-146,-147,-17,-100,-333,-335,-242,-178,-179,-174,-148,-149,-164,-180,-182,-187,-181,-183,-32,-33,-73,-69,-108,-109,-150,-152,-157,-151,-153,-184,-186,-185,-71,-154,-156,-155,-70,-188,-190,-72,-158,-160,-189,-191,-159,-161,]),'MACRO_ELSE':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,30,31,32,33,34,35,41,51,53,58,60,61,63,64,69,80,90,91,92,93,94,96,97,101,102,104,105,106,107,113,114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,160,169,170,172,173,176,177,178,179,180,181,182,183,184,185,186,187,188,189,209,210,217,220,222,223,224,225,226,227,229,230,231,232,233,234,235,236,251,252,254,255,276,277,286,287,288,289,290,291,292,293,298,299,302,303,304,305,306,350,351,356,357,362,367,368,369,370,371,372,373,376,377,378,379,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,409,410,413,414,416,417,419,420,423,430,431,432,433,434,435,458,461,462,464,470,471,473,476,480,481,482,485,501,502,503,514,524,525,526,540,541,545,550,551,552,554,555,557,558,559,560,564,565,567,568,569,571,572,590,591,593,595,597,598,600,607,612,613,614,615,616,618,619,620,621,],[33,33,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-26,-27,-58,-59,-60,-24,-19,-20,-21,-22,-23,-18,-2,-61,-321,-325,-326,-329,-331,-111,-63,-51,-54,-55,-56,-57,-74,-76,-101,-103,-322,-327,-328,-330,-110,-281,-284,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-112,-28,-30,-35,-37,-95,-96,-260,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-102,-332,-338,-339,-341,-342,-344,-345,-347,-348,-349,-350,-351,-352,-353,-334,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-126,-280,-167,-175,-169,-170,-171,-172,-173,-62,-75,-104,-337,-346,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-125,-145,-162,-163,-165,-166,-176,-177,-168,-29,-31,-34,-36,-38,-40,-99,-340,-343,-107,-299,-300,-307,-312,-245,-146,-147,-17,-100,-333,-335,-242,-178,-179,-174,-148,-149,-164,-180,-182,-187,-181,-183,-32,-33,-73,-69,-108,-109,-150,-152,-157,-151,-153,-184,-186,-185,-71,-154,-156,-155,-70,-188,-190,-72,-158,-160,-189,-191,-159,-161,]),'MACRO_ENDIF':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,30,31,32,33,34,35,41,51,53,58,60,61,63,64,69,80,90,91,92,93,94,96,97,101,102,104,105,106,107,113,114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,160,169,170,172,173,176,177,178,179,180,181,182,183,184,185,186,187,188,189,209,210,217,220,222,223,224,225,226,227,229,230,231,232,233,234,235,236,251,252,254,255,276,277,286,287,288,289,290,291,292,293,298,299,302,303,304,305,306,350,351,356,357,362,367,368,369,370,371,372,373,376,377,378,379,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,409,410,413,414,416,417,419,420,423,430,431,432,433,434,435,458,461,462,464,470,471,473,476,480,481,482,485,501,502,503,514,524,525,526,540,541,545,550,551,552,554,555,557,558,559,560,564,565,567,568,569,571,572,590,591,593,595,597,598,600,607,612,613,614,615,616,618,619,620,621,],[34,34,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-26,-27,-58,-59,-60,-24,-19,-20,-21,-22,-23,-18,-2,-61,-321,-325,-326,-329,-331,-111,-63,-51,-54,-55,-56,-57,-74,-76,-101,-103,-322,-327,-328,-330,-110,-281,-284,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-112,-28,-30,-35,-37,-95,-96,-260,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-102,-332,-338,-339,-341,-342,-344,-345,-347,-348,-349,-350,-351,-352,-353,-334,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-126,-280,-167,-175,-169,-170,-171,-172,-173,-62,-75,-104,-337,-346,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-125,-145,-162,-163,-165,-166,-176,-177,-168,-29,-31,-34,-36,-38,-40,-99,-340,-343,-107,-299,-300,-307,-312,-245,-146,-147,-17,-100,-333,-335,-242,-178,-179,-174,-148,-149,-164,-180,-182,-187,-181,-183,-32,-33,-73,-69,-108,-109,-150,-152,-157,-151,-153,-184,-186,-185,-71,-154,-156,-155,-70,-188,-190,-72,-158,-160,-189,-191,-159,-161,]),'MACRO_DEFINE':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,30,31,32,33,34,35,41,51,53,58,60,61,63,64,69,80,90,91,92,93,94,96,97,101,102,104,105,106,107,113,114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,160,169,170,172,173,176,177,178,179,180,181,182,183,184,185,186,187,188,189,209,210,217,220,222,223,224,225,226,227,229,230,231,232,233,234,235,236,251,252,254,255,276,277,286,287,288,289,290,291,292,293,298,299,302,303,304,305,306,350,351,356,357,362,367,368,369,370,371,372,373,376,377,378,379,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,409,410,413,414,416,417,419,420,423,430,431,432,433,434,435,458,461,462,464,470,471,473,476,480,481,482,485,501,502,503,514,524,525,526,540,541,545,550,551,552,554,555,557,558,559,560,564,565,567,568,569,571,572,590,591,593,595,597,598,600,607,612,613,614,615,616,618,619,620,621,],[35,35,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-26,-27,-58,-59,-60,-24,-19,-20,-21,-22,-23,-18,-2,-61,-321,-325,-326,-329,-331,-111,-63,-51,-54,-55,-56,-57,-74,-76,-101,-103,-322,-327,-328,-330,-110,-281,-284,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-112,-28,-30,-35,-37,-95,-96,-260,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-102,-332,-338,-339,-341,-342,-344,-345,-347,-348,-349,-350,-351,-352,-353,-334,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-126,-280,-167,-175,-169,-170,-171,-172,-173,-62,-75,-104,-337,-346,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-125,-145,-162,-163,-165,-166,-176,-177,-168,-29,-31,-34,-36,-38,-40,-99,-340,-343,-107,-299,-300,-307,-312,-245,-146,-147,-17,-100,-333,-335,-242,-178,-179,-174,-148,-149,-164,-180,-182,-187,-181,-183,-32,-33,-73,-69,-108,-109,-150,-152,-157,-151,-153,-184,-186,-185,-71,-154,-156,-155,-70,-188,-190,-72,-158,-160,-189,-191,-159,-161,]),'KWDAXIOM':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,30,31,32,33,34,35,41,51,53,58,60,61,63,64,69,80,90,91,92,93,94,96,97,101,102,104,105,106,107,113,114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,160,169,170,172,173,176,177,178,179,180,181,182,183,184,185,186,187,188,189,209,210,217,220,222,223,224,225,226,227,229,230,231,232,233,234,235,236,251,252,254,255,276,277,286,287,288,289,290,291,292,293,298,299,302,303,304,305,306,350,351,356,357,362,367,368,369,370,371,372,373,376,377,378,379,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,409,410,413,414,416,417,419,420,423,430,431,432,433,434,435,458,461,462,464,470,471,473,476,480,481,482,485,501,502,503,514,524,525,526,540,541,545,550,551,552,554,555,557,558,559,560,564,565,567,568,569,571,572,590,591,593,595,597,598,600,607,612,613,614,615,616,618,619,620,621,],[36,36,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-26,-27,-58,-59,-60,-24,-19,-20,-21,-22,-23,-18,-2,-61,-321,-325,-326,-329,-331,-111,-63,-51,-54,-55,-56,-57,-74,-76,-101,-103,-322,-327,-328,-330,-110,-281,-284,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-112,-28,-30,-35,-37,-95,-96,-260,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-102,-332,-338,-339,-341,-342,-344,-345,-347,-348,-349,-350,-351,-352,-353,-334,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-126,-280,-167,-175,-169,-170,-171,-172,-173,-62,-75,-104,-337,-346,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-125,-145,-162,-163,-165,-166,-176,-177,-168,-29,-31,-34,-36,-38,-40,-99,-340,-343,-107,-299,-300,-307,-312,-245,-146,-147,-17,-100,-333,-335,-242,-178,-179,-174,-148,-149,-164,-180,-182,-187,-181,-183,-32,-33,-73,-69,-108,-109,-150,-152,-157,-151,-153,-184,-186,-185,-71,-154,-156,-155,-70,-188,-190,-72,-158,-160,-189,-191,-159,-161,]),'KWDPREDICATE':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,30,31,32,33,34,35,41,51,53,58,60,61,63,64,69,80,90,91,92,93,94,96,97,101,102,104,105,106,107,113,114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,160,169,170,172,173,176,177,178,179,180,181,182,183,184,185,186,187,188,189,209,210,217,220,222,223,224,225,226,227,229,230,231,232,233,234,235,236,251,252,254,255,276,277,286,287,288,289,290,291,292,293,298,299,302,303,304,305,306,350,351,356,357,362,367,368,369,370,371,372,373,376,377,378,379,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,409,410,413,414,416,417,419,420,423,430,431,432,433,434,435,458,461,462,464,470,471,473,476,480,481,482,485,501,502,503,514,524,525,526,540,541,545,550,551,552,554,555,557,558,559,560,564,565,567,568,569,571,572,590,591,593,595,597,598,600,607,612,613,614,615,616,618,619,620,621,],[37,37,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-26,-27,-58,-59,-60,-24,-19,-20,-21,-22,-23,-18,-2,-61,-321,-325,-326,-329,-331,-111,-63,-51,-54,-55,-56,-57,-74,-76,-101,-103,-322,-327,-328,-330,-110,-281,-284,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-112,-28,-30,-35,-37,-95,-96,-260,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-102,-332,-338,-339,-341,-342,-344,-345,-347,-348,-349,-350,-351,-352,-353,-334,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-126,-280,-167,-175,-169,-170,-171,-172,-173,-62,-75,-104,-337,-346,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-125,-145,-162,-163,-165,-166,-176,-177,-168,-29,-31,-34,-36,-38,-40,-99,-340,-343,-107,-299,-300,-307,-312,-245,-146,-147,-17,-100,-333,-335,-242,-178,-179,-174,-148,-149,-164,-180,-182,-187,-181,-183,-32,-33,-73,-69,-108,-109,-150,-152,-157,-151,-153,-184,-186,-185,-71,-154,-156,-155,-70,-188,-190,-72,-158,-160,-189,-191,-159,-161,]),'KWDTEST':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,30,31,32,33,34,35,41,51,53,58,60,61,63,64,69,80,90,91,92,93,94,96,97,101,102,104,105,106,107,113,114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,160,169,170,172,173,176,177,178,179,180,181,182,183,184,185,186,187,188,189,209,210,217,220,222,223,224,225,226,227,229,230,231,232,233,234,235,236,251,252,254,255,276,277,286,287,288,289,290,291,292,293,298,299,302,303,304,305,306,350,351,356,357,362,367,368,369,370,371,372,373,376,377,378,379,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,409,410,413,414,416,417,419,420,423,430,431,432,433,434,435,458,461,462,464,470,471,473,476,480,481,482,485,501,502,503,514,524,525,526,540,541,545,550,551,552,554,555,557,558,559,560,564,565,567,568,569,571,572,590,591,593,595,597,598,600,607,612,613,614,615,616,618,619,620,621,],[39,39,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-26,-27,-58,-59,-60,-24,-19,-20,-21,-22,-23,-18,-2,-61,-321,-325,-326,-329,-331,-111,-63,-51,-54,-55,-56,-57,-74,-76,-101,-103,-322,-327,-328,-330,-110,-281,-284,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-112,-28,-30,-35,-37,-95,-96,-260,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-102,-332,-338,-339,-341,-342,-344,-345,-347,-348,-349,-350,-351,-352,-353,-334,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-126,-280,-167,-175,-169,-170,-171,-172,-173,-62,-75,-104,-337,-346,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-125,-145,-162,-163,-165,-166,-176,-177,-168,-29,-31,-34,-36,-38,-40,-99,-340,-343,-107,-299,-300,-307,-312,-245,-146,-147,-17,-100,-333,-335,-242,-178,-179,-174,-148,-149,-164,-180,-182,-187,-181,-183,-32,-33,-73,-69,-108,-109,-150,-152,-157,-151,-153,-184,-186,-185,-71,-154,-156,-155,-70,-188,-190,-72,-158,-160,-189,-191,-159,-161,]),'KWDDIFFLEMMA':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,30,31,32,33,34,35,41,51,53,58,60,61,63,64,69,80,90,91,92,93,94,96,97,101,102,104,105,106,107,113,114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,160,169,170,172,173,176,177,178,179,180,181,182,183,184,185,186,187,188,189,209,210,217,220,222,223,224,225,226,227,229,230,231,232,233,234,235,236,251,252,254,255,276,277,286,287,288,289,290,291,292,293,298,299,302,303,304,305,306,350,351,356,357,362,367,368,369,370,371,372,373,376,377,378,379,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,409,410,413,414,416,417,419,420,423,430,431,432,433,434,435,458,461,462,464,470,471,473,476,480,481,482,485,501,502,503,514,524,525,526,540,541,545,550,551,552,554,555,557,558,559,560,564,565,567,568,569,571,572,590,591,593,595,597,598,600,607,612,613,614,615,616,618,619,620,621,],[40,40,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-26,-27,-58,-59,-60,-24,-19,-20,-21,-22,-23,-18,-2,-61,-321,-325,-326,-329,-331,-111,-63,-51,-54,-55,-56,-57,-74,-76,-101,-103,-322,-327,-328,-330,-110,-281,-284,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-112,-28,-30,-35,-37,-95,-96,-260,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-102,-332,-338,-339,-341,-342,-344,-345,-347,-348,-349,-350,-351,-352,-353,-334,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-126,-280,-167,-175,-169,-170,-171,-172,-173,-62,-75,-104,-337,-346,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-125,-145,-162,-163,-165,-166,-176,-177,-168,-29,-31,-34,-36,-38,-40,-99,-340,-343,-107,-299,-300,-307,-312,-245,-146,-147,-17,-100,-333,-335,-242,-178,-179,-174,-148,-149,-164,-180,-182,-187,-181,-183,-32,-33,-73,-69,-108,-109,-150,-152,-157,-151,-153,-184,-186,-185,-71,-154,-156,-155,-70,-188,-190,-72,-158,-160,-189,-191,-159,-161,]),'FORGOTTEN_COMMENT':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,30,31,32,33,34,35,41,51,53,58,60,61,63,64,69,80,90,91,92,93,94,96,97,101,102,104,105,106,107,113,114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,160,169,170,172,173,176,177,178,179,180,181,182,183,184,185,186,187,188,189,209,210,217,220,222,223,224,225,226,227,229,230,231,232,233,234,235,236,251,252,254,255,276,277,286,287,288,289,290,291,292,293,298,299,302,303,304,305,306,350,351,356,357,362,367,368,369,370,371,372,373,376,377,378,379,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,409,410,413,414,416,417,419,420,423,430,431,432,433,434,435,458,461,462,464,470,471,473,476,480,481,482,485,501,502,503,514,524,525,526,540,541,545,550,551,552,554,555,557,558,559,560,564,565,567,568,569,571,572,590,591,593,595,597,598,600,607,612,613,614,615,616,618,619,620,621,],[41,41,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-26,-27,-58,-59,-60,-24,-19,-20,-21,-22,-23,-18,-2,-61,-321,-325,-326,-329,-331,-111,-63,-51,-54,-55,-56,-57,-74,-76,-101,-103,-322,-327,-328,-330,-110,-281,-284,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-112,-28,-30,-35,-37,-95,-96,-260,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-102,-332,-338,-339,-341,-342,-344,-345,-347,-348,-349,-350,-351,-352,-353,-334,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-126,-280,-167,-175,-169,-170,-171,-172,-173,-62,-75,-104,-337,-346,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-125,-145,-162,-163,-165,-166,-176,-177,-168,-29,-31,-34,-36,-38,-40,-99,-340,-343,-107,-299,-300,-307,-312,-245,-146,-147,-17,-100,-333,-335,-242,-178,-179,-174,-148,-149,-164,-180,-182,-187,-181,-183,-32,-33,-73,-69,-108,-109,-150,-152,-157,-151,-153,-184,-186,-185,-71,-154,-156,-155,-70,-188,-190,-72,-158,-160,-189,-191,-159,-161,]),'KWDFUNCTIONS':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,30,31,32,33,34,35,41,51,53,58,60,61,63,64,69,80,90,91,92,93,94,96,97,101,102,104,105,106,107,113,114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,160,169,170,172,173,176,177,178,179,180,181,182,183,184,185,186,187,188,189,209,210,217,220,222,223,224,225,226,227,229,230,231,232,233,234,235,236,251,252,254,255,276,277,286,287,288,289,290,291,292,293,298,299,302,303,304,305,306,350,351,356,357,362,367,368,369,370,371,372,373,376,377,378,379,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,409,410,413,414,416,417,419,420,423,430,431,432,433,434,435,458,461,462,464,470,471,473,476,480,481,482,485,501,502,503,514,524,525,526,540,541,545,550,551,552,554,555,557,558,559,560,564,565,567,568,569,571,572,590,591,593,595,597,598,600,607,612,613,614,615,616,618,619,620,621,],[42,42,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-26,-27,-58,-59,-60,-24,-19,-20,-21,-22,-23,-18,-2,-61,-321,-325,-326,-329,-331,-111,-63,-51,-54,-55,-56,-57,-74,-76,-101,-103,-322,-327,-328,-330,-110,-281,-284,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-112,-28,-30,-35,-37,-95,-96,-260,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-102,-332,-338,-339,-341,-342,-344,-345,-347,-348,-349,-350,-351,-352,-353,-334,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-126,-280,-167,-175,-169,-170,-171,-172,-173,-62,-75,-104,-337,-346,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-125,-145,-162,-163,-165,-166,-176,-177,-168,-29,-31,-34,-36,-38,-40,-99,-340,-343,-107,-299,-300,-307,-312,-245,-146,-147,-17,-100,-333,-335,-242,-178,-179,-174,-148,-149,-164,-180,-182,-187,-181,-183,-32,-33,-73,-69,-108,-109,-150,-152,-157,-151,-153,-184,-186,-185,-71,-154,-156,-155,-70,-188,-190,-72,-158,-160,-189,-191,-159,-161,]),'KWDEQUATIONS':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,30,31,32,33,34,35,41,51,53,58,60,61,63,64,69,80,90,91,92,93,94,96,97,101,102,104,105,106,107,113,114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,160,169,170,172,173,176,177,178,179,180,181,182,183,184,185,186,187,188,189,209,210,217,220,222,223,224,225,226,227,229,230,231,232,233,234,235,236,251,252,254,255,276,277,286,287,288,289,290,291,292,293,298,299,302,303,304,305,306,350,351,356,357,362,367,368,369,370,371,372,373,376,377,378,379,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,409,410,413,414,416,417,419,420,423,430,431,432,433,434,435,458,461,462,464,470,471,473,476,480,481,482,485,501,502,503,514,524,525,526,540,541,545,550,551,552,554,555,557,558,559,560,564,565,567,568,569,571,572,590,591,593,595,597,598,600,607,612,613,614,615,616,618,619,620,621,],[43,43,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-26,-27,-58,-59,-60,-24,-19,-20,-21,-22,-23,-18,-2,-61,-321,-325,-326,-329,-331,-111,-63,-51,-54,-55,-56,-57,-74,-76,-101,-103,-322,-327,-328,-330,-110,-281,-284,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-112,-28,-30,-35,-37,-95,-96,-260,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-102,-332,-338,-339,-341,-342,-344,-345,-347,-348,-349,-350,-351,-352,-353,-334,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-126,-280,-167,-175,-169,-170,-171,-172,-173,-62,-75,-104,-337,-346,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-125,-145,-162,-163,-165,-166,-176,-177,-168,-29,-31,-34,-36,-38,-40,-99,-340,-343,-107,-299,-300,-307,-312,-245,-146,-147,-17,-100,-333,-335,-242,-178,-179,-174,-148,-149,-164,-180,-182,-187,-181,-183,-32,-33,-73,-69,-108,-109,-150,-152,-157,-151,-153,-184,-186,-185,-71,-154,-156,-155,-70,-188,-190,-72,-158,-160,-189,-191,-159,-161,]),'KWDBUILTINS':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,30,31,32,33,34,35,41,51,53,58,60,61,63,64,69,80,90,91,92,93,94,96,97,101,102,104,105,106,107,113,114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,160,169,170,172,173,176,177,178,179,180,181,182,183,184,185,186,187,188,189,209,210,217,220,222,223,224,225,226,227,229,230,231,232,233,234,235,236,251,252,254,255,276,277,286,287,288,289,290,291,292,293,298,299,302,303,304,305,306,350,351,356,357,362,367,368,369,370,371,372,373,376,377,378,379,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,409,410,413,414,416,417,419,420,423,430,431,432,433,434,435,458,461,462,464,470,471,473,476,480,481,482,485,501,502,503,514,524,525,526,540,541,545,550,551,552,554,555,557,558,559,560,564,565,567,568,569,571,572,590,591,593,595,597,598,600,607,612,613,614,615,616,618,619,620,621,],[44,44,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-26,-27,-58,-59,-60,-24,-19,-20,-21,-22,-23,-18,-2,-61,-321,-325,-326,-329,-331,-111,-63,-51,-54,-55,-56,-57,-74,-76,-101,-103,-322,-327,-328,-330,-110,-281,-284,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-112,-28,-30,-35,-37,-95,-96,-260,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-102,-332,-338,-339,-341,-342,-344,-345,-347,-348,-349,-350,-351,-352,-353,-334,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-126,-280,-167,-175,-169,-170,-171,-172,-173,-62,-75,-104,-337,-346,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-125,-145,-162,-163,-165,-166,-176,-177,-168,-29,-31,-34,-36,-38,-40,-99,-340,-343,-107,-299,-300,-307,-312,-245,-146,-147,-17,-100,-333,-335,-242,-178,-179,-174,-148,-149,-164,-180,-182,-187,-181,-183,-32,-33,-73,-69,-108,-109,-150,-152,-157,-151,-153,-184,-186,-185,-71,-154,-156,-155,-70,-188,-190,-72,-158,-160,-189,-191,-159,-161,]),'KWDTACTIC':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,30,31,32,33,34,35,41,51,53,58,60,61,63,64,69,80,90,91,92,93,94,96,97,101,102,104,105,106,107,113,114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,160,169,170,172,173,176,177,178,179,180,181,182,183,184,185,186,187,188,189,209,210,217,220,222,223,224,225,226,227,229,230,231,232,233,234,235,236,251,252,254,255,276,277,286,287,288,289,290,291,292,293,298,299,302,303,304,305,306,350,351,356,357,362,367,368,369,370,371,372,373,376,377,378,379,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,409,410,413,414,416,417,419,420,423,430,431,432,433,434,435,458,461,462,464,470,471,473,476,480,481,482,485,501,502,503,514,524,525,526,540,541,545,550,551,552,554,555,557,558,559,560,564,565,567,568,569,571,572,590,591,593,595,597,598,600,607,612,613,614,615,616,618,619,620,621,],[46,46,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-26,-27,-58,-59,-60,-24,-19,-20,-21,-22,-23,-18,-2,-61,-321,-325,-326,-329,-331,-111,-63,-51,-54,-55,-56,-57,-74,-76,-101,-103,-322,-327,-328,-330,-110,-281,-284,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-112,-28,-30,-35,-37,-95,-96,-260,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-102,-332,-338,-339,-341,-342,-344,-345,-347,-348,-349,-350,-351,-352,-353,-334,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-126,-280,-167,-175,-169,-170,-171,-172,-173,-62,-75,-104,-337,-346,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-125,-145,-162,-163,-165,-166,-176,-177,-168,-29,-31,-34,-36,-38,-40,-99,-340,-343,-107,-299,-300,-307,-312,-245,-146,-147,-17,-100,-333,-335,-242,-178,-179,-174,-148,-149,-164,-180,-182,-187,-181,-183,-32,-33,-73,-69,-108,-109,-150,-152,-157,-151,-153,-184,-186,-185,-71,-154,-156,-155,-70,-188,-190,-72,-158,-160,-189,-191,-159,-161,]),'KWDLEMMA':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,30,31,32,33,34,35,41,51,53,58,60,61,63,64,69,80,90,91,92,93,94,96,97,101,102,104,105,106,107,113,114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,160,169,170,172,173,176,177,178,179,180,181,182,183,184,185,186,187,188,189,209,210,217,220,222,223,224,225,226,227,229,230,231,232,233,234,235,236,251,252,254,255,276,277,286,287,288,289,290,291,292,293,298,299,302,303,304,305,306,350,351,356,357,362,367,368,369,370,371,372,373,376,377,378,379,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,409,410,413,414,416,417,419,420,423,430,431,432,433,434,435,458,461,462,464,470,471,473,476,480,481,482,485,501,502,503,514,524,525,526,540,541,545,550,551,552,554,555,557,558,559,560,564,565,567,568,569,571,572,590,591,593,595,597,598,600,607,612,613,614,615,616,618,619,620,621,],[47,47,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-26,-27,-58,-59,-60,-24,-19,-20,-21,-22,-23,-18,-2,-61,-321,-325,-326,-329,-331,-111,-63,-51,-54,-55,-56,-57,-74,-76,-101,-103,-322,-327,-328,-330,-110,-281,-284,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-112,-28,-30,-35,-37,-95,-96,-260,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-102,-332,-338,-339,-341,-342,-344,-345,-347,-348,-349,-350,-351,-352,-353,-334,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-126,-280,-167,-175,-169,-170,-171,-172,-173,-62,-75,-104,-337,-346,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-125,-145,-162,-163,-165,-166,-176,-177,-168,-29,-31,-34,-36,-38,-40,-99,-340,-343,-107,-299,-300,-307,-312,-245,-146,-147,-17,-100,-333,-335,-242,-178,-179,-174,-148,-149,-164,-180,-182,-187,-181,-183,-32,-33,-73,-69,-108,-109,-150,-152,-157,-151,-153,-184,-186,-185,-71,-154,-156,-155,-70,-188,-190,-72,-158,-160,-189,-191,-159,-161,]),'KWDRULE':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,30,31,32,33,34,35,41,51,53,54,55,58,60,61,63,64,69,80,90,91,92,93,94,96,97,101,102,104,105,106,107,113,114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,160,169,170,172,173,176,177,178,179,180,181,182,183,184,185,186,187,188,189,209,210,211,212,217,220,222,223,224,225,226,227,229,230,231,232,233,234,235,236,251,252,254,255,276,277,286,287,288,289,290,291,292,293,298,299,302,303,304,305,306,350,351,356,357,362,367,368,369,370,371,372,373,376,377,378,379,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,409,410,413,414,416,417,419,420,423,430,431,432,433,434,435,458,461,462,464,470,471,473,476,480,481,482,485,501,502,503,514,524,525,526,540,541,545,550,551,552,554,555,557,558,559,560,564,565,567,568,569,571,572,590,591,593,595,597,598,600,607,612,613,614,615,616,618,619,620,621,],[49,49,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-26,-27,-58,-59,-60,-24,-19,-20,-21,-22,-23,-18,-2,-61,49,49,-321,-325,-326,-329,-331,-111,-63,-51,-54,-55,-56,-57,-74,-76,-101,-103,-322,-327,-328,-330,-110,-281,-284,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-112,-28,-30,-35,-37,-95,-96,-260,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,49,49,-102,-332,-338,-339,-341,-342,-344,-345,-347,-348,-349,-350,-351,-352,-353,-334,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-126,-280,-167,-175,-169,-170,-171,-172,-173,-62,-75,-104,-337,-346,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-125,-145,-162,-163,-165,-166,-176,-177,-168,-29,-31,-34,-36,-38,-40,-99,-340,-343,-107,-299,-300,-307,-312,-245,-146,-147,-17,-100,-333,-335,-242,-178,-179,-174,-148,-149,-164,-180,-182,-187,-181,-183,-32,-33,-73,-69,-108,-109,-150,-152,-157,-151,-153,-184,-186,-185,-71,-154,-156,-155,-70,-188,-190,-72,-158,-160,-189,-191,-159,-161,]),'KWDEND':([5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,30,31,32,33,34,35,41,51,53,58,60,61,63,64,69,80,90,91,92,93,94,96,97,101,102,104,105,106,107,113,114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,160,169,170,172,173,176,177,178,179,180,181,182,183,184,185,186,187,188,189,209,210,217,220,222,223,224,225,226,227,229,230,231,232,233,234,235,236,251,252,254,255,276,277,286,287,288,289,290,291,292,293,298,299,302,303,304,305,306,350,351,356,357,362,367,368,369,370,371,372,373,376,377,378,379,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,409,410,413,414,416,417,419,420,423,430,431,432,433,434,435,458,461,462,464,470,471,473,476,480,481,482,485,501,502,503,514,524,525,526,540,541,545,550,551,552,554,555,557,558,559,560,564,565,567,568,569,571,572,590,591,593,595,597,598,600,607,612,613,614,615,616,618,619,620,621,],[50,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-25,-26,-27,-58,-59,-60,-24,-19,-20,-21,-22,-23,-18,-2,-61,-321,-325,-326,-329,-331,-111,-63,-51,-54,-55,-56,-57,-74,-76,-101,-103,-322,-327,-328,-330,-110,-281,-284,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-112,-28,-30,-35,-37,-95,-96,-260,-39,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-102,-332,-338,-339,-341,-342,-344,-345,-347,-348,-349,-350,-351,-352,-353,-334,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-126,-280,-167,-175,-169,-170,-171,-172,-173,-62,-75,-104,-337,-346,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-125,-145,-162,-163,-165,-166,-176,-177,-168,-29,-31,-34,-36,-38,-40,-99,-340,-343,-107,-299,-300,-307,-312,-245,-146,-147,-17,-100,-333,-335,-242,-178,-179,-174,-148,-149,-164,-180,-182,-187,-181,-183,-32,-33,-73,-69,-108,-109,-150,-152,-157,-151,-153,-184,-186,-185,-71,-154,-156,-155,-70,-188,-190,-72,-158,-160,-189,-191,-159,-161,]),'COLON':([23,28,37,42,43,44,46,56,62,65,66,67,75,76,85,88,99,116,135,167,176,177,198,199,202,203,206,208,252,255,271,272,339,349,354,355,365,366,370,380,381,386,387,424,447,522,543,],[52,57,68,77,78,79,84,98,108,109,110,111,165,166,201,205,214,248,278,308,323,324,332,333,337,338,341,348,248,248,396,397,445,457,-105,-106,465,466,248,248,248,474,475,-129,-78,248,248,]),'KWDRIGHT':([24,25,26,53,80,95,96,97,100,112,168,350,351,425,559,560,595,607,614,],[-58,-59,-60,-61,-63,211,-74,-76,216,239,316,-62,-75,316,-73,-69,-71,-70,-72,]),'KWDLEFT':([24,80,100,112,168,425,559,560,595,607,614,],[54,-63,215,240,315,315,-73,-69,-71,-70,-72,]),'KWDVARIANTS':([24,80,559,560,595,607,614,],[55,-63,-73,-69,-71,-70,-72,]),'KWDPRESORT':([29,200,],[62,-323,]),'KWDPRIO':([29,59,60,63,93,106,200,219,220,222,223,224,225,226,227,229,230,231,232,233,234,235,357,362,461,462,502,],[65,65,65,-329,-56,-328,-323,-324,-332,-338,-339,-341,-342,-344,-345,-347,-348,-349,-350,-351,-352,-353,-337,-346,-340,-343,-333,]),'KWDDEPRIO':([29,59,60,61,63,64,93,105,106,107,200,219,220,222,223,224,225,226,227,229,230,231,232,233,234,235,236,357,362,461,462,502,503,],[66,66,66,66,-329,-331,-56,66,-328,-330,-323,-324,-332,-338,-339,-341,-342,-344,-345,-347,-348,-349,-350,-351,-352,-353,-334,-337,-346,-340,-343,-333,-335,]),'DOUBLEQUOTE':([38,57,70,98,101,102,111,114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,161,165,176,177,178,201,214,217,218,251,252,254,255,276,277,286,287,288,289,290,291,293,294,295,334,335,336,337,338,352,356,364,367,368,369,370,371,372,373,376,377,378,379,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,418,443,444,445,459,465,466,470,471,473,476,480,498,514,535,536,],[73,73,73,73,73,-103,73,-281,-284,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,293,73,-95,-96,-260,-113,73,-102,293,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-280,-121,-122,-117,-127,-128,-115,-114,293,-104,293,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,293,-119,-118,-116,293,73,73,-299,-300,-307,-312,-245,-120,-242,293,293,]),'LBRACKET':([45,48,56,67,76,82,85,88,203,205,208,329,341,348,374,431,432,436,457,469,477,496,513,532,563,],[81,-64,100,112,168,194,168,207,168,-65,207,-91,-67,-66,468,493,-34,494,-68,468,468,533,468,561,596,]),'KWDLET':([45,48,205,341,348,457,],[83,-64,-65,-67,-66,-68,]),'LPAREN':([47,49,68,71,73,78,103,116,120,121,122,127,130,154,175,176,193,213,238,241,242,243,244,245,246,247,249,250,252,253,255,256,266,275,279,280,281,282,283,284,285,297,307,321,322,331,353,370,380,381,384,394,398,415,479,484,504,505,517,521,522,543,548,617,],[87,87,122,122,-279,175,122,247,253,256,122,260,175,285,175,-246,247,122,122,122,122,122,122,122,122,175,122,122,247,122,247,122,175,398,175,175,175,175,175,175,175,122,422,175,175,175,122,247,247,247,175,122,175,484,175,517,122,122,122,549,247,247,122,622,]),'HEURISTICORACLE':([52,90,91,92,93,94,209,210,318,],[94,94,-54,-55,-56,-57,-52,-53,94,]),'KWDNOT':([68,71,73,103,109,110,122,213,220,222,223,224,225,226,227,229,230,231,232,233,234,235,236,238,241,242,243,244,245,246,249,250,253,256,297,353,357,360,361,362,394,460,461,462,463,484,502,503,504,505,517,548,],[120,120,-279,120,228,228,120,120,228,-338,-339,-341,-342,-344,-345,-347,-348,-349,-350,-351,-352,-353,228,120,120,120,120,120,120,120,120,120,120,120,120,120,-337,228,228,-346,120,228,-340,-343,228,120,228,228,120,120,120,120,]),'UNINOT':([68,71,73,103,122,213,238,241,242,243,244,245,246,249,250,253,256,297,353,394,484,504,505,517,548,],[121,121,-279,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'UNIFALSE':([68,71,73,103,120,121,122,213,238,241,242,243,244,245,246,249,250,253,256,297,353,394,484,504,505,517,548,],[123,123,-279,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,]),'UNITRUE':([68,71,73,103,120,121,122,213,238,241,242,243,244,245,246,249,250,253,256,297,353,394,484,504,505,517,548,],[124,124,-279,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,]),'NATURAL':([68,71,73,78,103,120,121,122,130,132,137,138,139,140,158,159,175,213,238,241,242,243,244,245,246,247,249,250,253,256,260,261,262,263,266,267,268,269,270,271,272,273,276,277,279,280,281,282,283,284,285,287,288,289,290,291,297,320,321,322,331,353,376,377,384,394,395,398,399,400,421,479,483,484,504,505,517,547,548,549,573,574,575,576,577,578,579,580,581,582,583,584,585,592,599,603,622,624,],[125,125,-279,178,125,125,125,125,178,273,-317,-318,-319,-320,291,-259,178,125,125,125,125,125,125,125,125,178,125,125,125,125,388,388,388,388,178,273,-314,-315,-316,-95,-96,-205,-199,-204,178,178,178,178,178,178,178,-257,-258,-251,-253,-254,125,432,178,178,178,125,-97,-203,178,125,-313,178,-202,-98,487,178,516,125,125,125,544,388,125,589,589,388,-208,-209,-210,-211,-212,-213,-214,-215,-216,-217,-218,606,610,-207,388,589,]),'KWDLAST':([68,71,73,103,120,121,122,213,238,241,242,243,244,245,246,249,250,253,256,297,353,394,484,504,505,517,548,],[127,127,-279,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,]),'BANG':([68,71,73,81,103,120,121,122,194,213,238,241,242,243,244,245,246,249,250,253,256,297,327,353,394,437,484,494,497,504,505,517,533,548,561,596,],[133,133,-279,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,]),'HASH':([68,71,73,103,120,121,122,132,137,138,139,140,159,213,238,241,242,243,244,245,246,249,250,253,256,260,261,262,263,267,268,269,270,271,272,273,276,277,287,288,289,290,291,297,344,345,346,347,353,376,377,394,395,399,400,484,504,505,517,547,548,574,575,576,577,578,579,580,581,582,583,584,585,603,622,],[134,134,-279,134,134,134,134,134,-317,-318,-319,-320,-259,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,-314,-315,-316,-95,-96,-205,-199,-204,-257,-258,-251,-253,-254,134,451,451,-85,-86,134,-97,-203,134,-313,-202,-98,134,134,134,134,134,134,134,-208,-209,-210,-211,-212,-213,-214,-215,-216,-217,-218,-207,134,]),'IDENTDOTNATURAL':([68,71,73,78,83,103,120,121,122,130,132,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,155,156,157,158,159,175,176,177,178,195,196,213,238,241,242,243,244,245,246,247,249,250,253,256,260,261,262,263,266,267,268,269,270,271,272,273,274,276,277,279,280,281,282,283,284,285,286,287,288,289,290,291,297,321,322,330,331,353,376,377,383,384,392,394,395,398,399,400,401,402,403,404,405,407,440,479,480,484,504,505,514,517,547,548,574,575,576,577,578,579,580,581,582,583,584,585,603,622,],[135,135,-279,177,199,135,135,135,135,177,272,277,-222,-317,-318,-319,-320,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,288,-249,290,-259,177,-95,-96,-260,199,-93,135,135,135,135,135,135,135,135,177,135,135,135,135,387,387,387,387,177,272,-314,-315,-316,-95,-96,-205,288,-199,-204,177,177,177,177,177,177,177,-248,-257,-258,-251,-253,-254,135,177,177,-92,177,135,-97,-203,-236,177,-219,135,-313,177,-202,-98,-223,-226,-227,-230,-233,-244,-94,177,-245,135,135,135,-242,135,387,135,387,-208,-209,-210,-211,-212,-213,-214,-215,-216,-217,-218,-207,387,]),'KWDEXISTS':([68,71,73,103,120,121,122,213,238,241,242,243,244,245,246,249,250,253,256,297,353,394,484,504,505,517,548,],[137,137,-279,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,]),'UNIEXISTS':([68,71,73,103,120,121,122,213,238,241,242,243,244,245,246,249,250,253,256,297,353,394,484,504,505,517,548,],[138,138,-279,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,]),'KWDFORALL':([68,71,73,103,120,121,122,213,238,241,242,243,244,245,246,249,250,253,256,297,353,394,484,504,505,517,548,],[139,139,-279,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,]),'UNIFORALL':([68,71,73,103,120,121,122,213,238,241,242,243,244,245,246,249,250,253,256,297,353,394,484,504,505,517,548,],[140,140,-279,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,]),'LOWER':([68,71,73,78,103,116,120,121,122,125,128,130,135,175,213,238,241,242,243,244,245,246,247,249,250,252,253,255,256,266,276,277,279,280,281,282,283,284,285,297,321,322,331,353,370,377,380,381,384,394,398,399,479,484,504,505,517,522,542,543,544,548,],[130,130,-279,130,130,-200,130,130,130,-205,261,130,-201,130,130,130,130,130,130,130,130,130,130,130,130,-200,130,-200,130,130,-199,-204,130,130,130,130,130,130,130,130,130,130,130,130,-200,-203,-200,-200,130,130,130,-202,130,130,130,130,130,-200,261,-200,-205,130,]),'LITERAL':([68,71,73,78,103,120,121,122,130,156,175,213,238,241,242,243,244,245,246,247,249,250,253,256,266,279,280,281,282,283,284,285,297,321,322,331,353,384,394,398,479,484,504,505,517,548,],[155,155,-279,155,155,155,155,155,155,286,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,]),'TILDE':([68,71,73,78,103,120,121,122,130,132,137,138,139,140,159,175,213,238,241,242,243,244,245,246,247,249,250,253,256,266,267,268,269,270,271,272,273,276,277,279,280,281,282,283,284,285,287,288,289,290,291,297,321,322,331,353,376,377,384,394,395,398,399,400,479,484,504,505,517,548,],[156,156,-279,156,156,156,156,156,156,274,-317,-318,-319,-320,-259,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,274,-314,-315,-316,-95,-96,-205,-199,-204,156,156,156,156,156,156,156,-257,-258,-251,-253,-254,156,156,156,156,156,-97,-203,156,156,-313,156,-202,-98,156,156,156,156,156,156,]),'DOLLAR':([68,71,73,78,103,120,121,122,130,132,137,138,139,140,159,175,213,238,241,242,243,244,245,246,247,249,250,253,256,266,267,268,269,270,271,272,273,276,277,279,280,281,282,283,284,285,287,288,289,290,291,297,321,322,331,353,376,377,384,394,395,398,399,400,479,484,504,505,517,548,],[158,158,-279,158,158,158,158,158,158,158,-317,-318,-319,-320,-259,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,-314,-315,-316,-95,-96,-205,-199,-204,158,158,158,158,158,158,158,-257,-258,-251,-253,-254,158,158,158,158,158,-97,-203,158,158,-313,158,-202,-98,158,158,158,158,158,158,]),'KWDACCOUNT':([72,74,296,],[162,-124,-123,]),'KWDACCOUNTS':([72,74,296,],[163,-124,-123,]),'COMMA':([72,74,80,81,94,96,97,116,125,135,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,169,170,172,173,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,194,258,259,264,265,276,277,286,287,288,289,290,291,296,309,310,311,312,313,314,315,316,328,342,343,351,374,375,376,377,380,381,383,386,387,388,392,399,400,401,402,403,404,405,406,407,408,426,427,429,430,431,432,433,434,435,437,438,449,450,452,453,454,455,456,467,469,472,477,478,480,489,490,491,492,494,495,497,499,500,506,507,508,509,510,511,512,513,514,527,531,533,534,537,539,542,543,544,556,557,558,559,560,561,562,566,594,595,596,607,608,614,623,],[164,-124,-63,-264,-57,212,-76,-95,-260,-96,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,319,-30,321,-37,-95,-96,-260,325,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,327,-262,-263,-264,384,-221,384,-221,-199,-204,-248,-257,-258,-251,-253,-254,-123,425,-131,-132,-133,-134,-135,-136,-137,327,448,-80,-75,-265,384,-97,-203,-95,-95,-236,-200,-201,-205,-219,-202,-98,-223,-226,-227,-230,-233,384,-244,384,-138,-139,-141,-29,-31,-34,-36,-38,-40,-264,-261,-81,-83,-88,-89,-90,-82,-84,-269,-267,-220,-266,384,-245,-130,528,-143,-144,-264,327,-264,-79,-87,538,-275,-276,-277,-278,-271,-270,-268,-242,-140,327,-264,327,-273,-272,573,-95,-205,-142,-32,-33,-73,-69,-264,327,-274,327,-71,-264,-70,327,-72,624,]),'KWDDIFFIEHELLMAN':([79,325,],[181,181,]),'KWDHASHING':([79,325,],[182,182,]),'KWDSYMMETRICENCRYPTION':([79,325,],[183,183,]),'KWDASYMMETRICENCRYPTION':([79,325,],[184,184,]),'KWDSIGNING':([79,325,],[185,185,]),'KWDBILINEARPAIRING':([79,325,],[186,186,]),'KWDXOR':([79,325,],[187,187,]),'KWDMULTISET':([79,325,],[188,188,]),'KWDREVEALINGSIGNING':([79,325,],[189,189,]),'RBRACKET':([81,94,190,191,192,194,215,216,239,240,309,310,311,312,313,314,315,316,328,342,343,374,426,427,429,438,449,450,452,453,454,455,456,467,469,477,489,494,499,500,506,507,508,509,510,511,512,513,527,529,530,531,533,537,539,561,562,566,594,596,608,],[-264,-57,326,-262,-263,-264,354,355,365,366,424,-131,-132,-133,-134,-135,-136,-137,439,447,-80,-265,-138,-139,-141,-261,-81,-83,-88,-89,-90,-82,-84,-269,-267,-266,-130,-264,-79,-87,537,-275,-276,-277,-278,-271,-270,-268,-140,557,558,559,-264,-273,-272,-264,559,-274,559,-264,559,]),'KWDMODULO':([87,],[204,]),'LBRACE':([109,110,116,153,176,252,255,318,370,380,381,522,543,],[221,237,-243,284,-243,-243,-243,428,-243,-243,-243,-243,-243,]),'REGEX_STRING':([109,110,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,357,360,361,362,460,461,462,463,502,503,],[229,229,229,-338,-339,-341,-342,-344,-345,229,-347,-348,-349,-350,-351,-352,-353,229,-337,229,229,-346,229,-340,-343,229,229,229,]),'ISFACTNAME_STRING':([109,110,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,357,360,361,362,460,461,462,463,502,503,],[230,230,230,-338,-339,-341,-342,-344,-345,230,-347,-348,-349,-350,-351,-352,-353,230,-337,230,230,-346,230,-340,-343,230,230,230,]),'ISINFACTTERMS_STRING':([109,110,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,357,360,361,362,460,461,462,463,502,503,],[231,231,231,-338,-339,-341,-342,-344,-345,231,-347,-348,-349,-350,-351,-352,-353,231,-337,231,231,-346,231,-340,-343,231,231,231,]),'DHRENOISE_STRING':([109,110,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,357,360,361,362,460,461,462,463,502,503,],[232,232,232,-338,-339,-341,-342,-344,-345,232,-347,-348,-349,-350,-351,-352,-353,232,-337,232,232,-346,232,-340,-343,232,232,232,]),'DEFAULTNOISE_STRING':([109,110,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,357,360,361,362,460,461,462,463,502,503,],[233,233,233,-338,-339,-341,-342,-344,-345,233,-347,-348,-349,-350,-351,-352,-353,233,-337,233,233,-346,233,-340,-343,233,233,233,]),'REASONABLENONCESNOISE_STRING':([109,110,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,357,360,361,362,460,461,462,463,502,503,],[234,234,234,-338,-339,-341,-342,-344,-345,234,-347,-348,-349,-350,-351,-352,-353,234,-337,234,234,-346,234,-340,-343,234,234,234,]),'NONABSURDGOAL_STRING':([109,110,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,357,360,361,362,460,461,462,463,502,503,],[235,235,235,-338,-339,-341,-342,-344,-345,235,-347,-348,-349,-350,-351,-352,-353,235,-337,235,235,-346,235,-340,-343,235,235,235,]),'RPAREN':([114,115,116,117,118,119,123,124,125,126,135,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,176,177,178,247,251,252,254,255,257,258,259,265,276,277,285,286,287,288,289,290,291,340,367,368,369,370,371,372,373,375,376,377,378,379,380,381,382,383,385,386,387,388,389,390,391,392,393,398,399,400,401,402,403,404,405,407,408,413,414,416,417,470,471,472,473,476,478,480,488,514,518,520,522,523,543,544,545,586,587,588,589,601,602,604,625,626,],[-281,-284,-95,-290,-293,-294,-301,-302,-260,-305,-96,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-95,-96,-260,374,-295,-297,-296,-298,382,383,-221,-221,-199,-204,407,-248,-257,-258,-251,-253,-254,446,-282,-283,-285,-287,-286,-288,-289,469,-97,-203,-291,-292,470,471,-306,-236,473,-200,-201,-205,-309,-311,-308,-219,-310,477,-202,-98,-223,-226,-227,-230,-233,-244,480,-162,-163,-165,-166,-299,-300,-220,-307,-312,513,-245,526,-242,545,-195,-303,-198,-95,-260,-164,-193,-197,604,-206,611,-192,-196,626,-194,]),'CONJUNCTION':([114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,176,177,178,225,226,227,229,230,231,232,233,234,235,251,252,254,255,276,277,286,287,288,289,290,291,362,367,368,369,370,371,372,373,376,377,378,379,380,381,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,462,470,471,473,476,480,514,522,543,544,586,],[-281,-284,-303,249,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-95,-96,-260,361,-344,-345,-347,-348,-349,-350,-351,-352,-353,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-346,-282,-283,-285,-287,-286,249,249,-97,-203,-291,-292,-303,-303,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-343,-299,-300,-307,-312,-245,-242,-303,-303,-304,-308,]),'UNICONJUNCTION':([114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,176,177,178,251,252,254,255,276,277,286,287,288,289,290,291,367,368,369,370,371,372,373,376,377,378,379,380,381,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,470,471,473,476,480,514,522,543,544,586,],[-281,-284,-303,250,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-95,-96,-260,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-282,-283,-285,-287,-286,250,250,-97,-203,-291,-292,-303,-303,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-299,-300,-307,-312,-245,-242,-303,-303,-304,-308,]),'IMPLY':([114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,176,177,178,251,252,254,255,276,277,286,287,288,289,290,291,367,368,369,370,371,372,373,376,377,378,379,380,381,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,470,471,473,476,480,514,522,543,544,586,],[-281,243,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-95,-96,-260,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-303,-303,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-299,-300,-307,-312,-245,-242,-303,-303,-304,-308,]),'UNIIMPLY':([114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,176,177,178,251,252,254,255,276,277,286,287,288,289,290,291,367,368,369,370,371,372,373,376,377,378,379,380,381,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,470,471,473,476,480,514,522,543,544,586,],[-281,244,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-95,-96,-260,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-303,-303,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-299,-300,-307,-312,-245,-242,-303,-303,-304,-308,]),'DISJUNCTION':([114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,176,177,178,223,224,225,226,227,229,230,231,232,233,234,235,251,252,254,255,276,277,286,287,288,289,290,291,362,367,368,369,370,371,372,373,376,377,378,379,380,381,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,461,462,470,471,473,476,480,514,522,543,544,586,],[-281,245,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-95,-96,-260,360,-341,-342,-344,-345,-347,-348,-349,-350,-351,-352,-353,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-346,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-303,-303,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-340,-343,-299,-300,-307,-312,-245,-242,-303,-303,-304,-308,]),'UNIDISJUNCTION':([114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,176,177,178,251,252,254,255,276,277,286,287,288,289,290,291,367,368,369,370,371,372,373,376,377,378,379,380,381,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,470,471,473,476,480,514,522,543,544,586,],[-281,246,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-95,-96,-260,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-303,-303,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-299,-300,-307,-312,-245,-242,-303,-303,-304,-308,]),'EQUIVALENT':([114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,176,177,178,251,252,254,255,276,277,286,287,288,289,290,291,367,368,369,370,371,372,373,376,377,378,379,380,381,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,470,471,473,476,480,514,522,543,544,586,],[241,-284,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-95,-96,-260,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-303,-303,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-299,-300,-307,-312,-245,-242,-303,-303,-304,-308,]),'UNIEQUIVALENT':([114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,176,177,178,251,252,254,255,276,277,286,287,288,289,290,291,367,368,369,370,371,372,373,376,377,378,379,380,381,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,470,471,473,476,480,514,522,543,544,586,],[242,-284,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-95,-96,-260,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-303,-303,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-299,-300,-307,-312,-245,-242,-303,-303,-304,-308,]),'FORMULASEP':([114,115,116,117,118,119,123,124,125,126,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,176,177,178,251,252,254,255,276,277,286,287,288,289,290,291,367,368,369,370,371,372,373,376,377,378,379,382,383,386,387,388,389,390,391,392,393,399,400,401,402,403,404,405,407,470,471,473,476,480,514,520,522,523,586,587,],[-281,-284,-303,-290,-293,-294,-301,-302,-304,-305,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-95,-96,-260,-295,-297,-296,-298,-199,-204,-248,-257,-258,-251,-253,-254,-282,-283,-285,-287,-286,-288,-289,-97,-203,-291,-292,-306,-236,-200,-201,-205,-309,-311,-308,-219,-310,-202,-98,-223,-226,-227,-230,-233,-244,-299,-300,-307,-312,-245,-242,548,-303,-198,-308,-197,]),'EQUAL':([116,125,128,131,135,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,174,176,177,178,197,198,199,252,255,259,276,277,286,287,288,289,290,291,370,376,377,380,381,383,392,399,400,401,402,403,404,405,407,441,442,480,514,522,542,543,544,],[-95,-205,262,266,-96,-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,322,-95,-96,-260,331,-95,-96,-95,-95,266,-199,-204,-248,-257,-258,-251,-253,-254,-95,-97,-203,-95,-95,-236,-219,-202,-98,-223,-226,-227,-230,-233,-244,-97,-98,-245,-242,-95,262,-95,-205,]),'EXPONENTIAL':([116,125,135,146,147,148,149,150,151,152,155,157,159,176,177,178,252,255,286,287,288,289,290,291,370,376,380,381,383,392,400,405,407,480,514,522,543,544,],[-95,-260,-96,283,-234,-235,-237,-238,-239,-240,-247,-249,-259,-95,-96,-260,-95,-95,-248,-257,-258,-251,-253,-254,-95,-97,-95,-95,-236,-219,-98,-233,-244,-245,-242,-95,-95,-260,]),'MULTIPLY':([116,125,135,144,145,146,147,148,149,150,151,152,155,157,159,176,177,178,252,255,286,287,288,289,290,291,370,376,380,381,383,392,400,404,405,407,480,514,522,543,544,],[-95,-260,-96,282,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-95,-96,-260,-95,-95,-248,-257,-258,-251,-253,-254,-95,-97,-95,-95,-236,-219,-98,-230,-233,-244,-245,-242,-95,-95,-260,]),'OPXOR':([116,125,135,142,143,144,145,146,147,148,149,150,151,152,155,157,159,176,177,178,252,255,286,287,288,289,290,291,370,376,380,381,383,392,400,402,403,404,405,407,480,514,522,543,544,],[-95,-260,-96,280,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-95,-96,-260,-95,-95,-248,-257,-258,-251,-253,-254,-95,-97,-95,-95,-236,-219,-98,-226,-227,-230,-233,-244,-245,-242,-95,-95,-260,]),'XORSYMBOL':([116,125,135,142,143,144,145,146,147,148,149,150,151,152,155,157,159,176,177,178,252,255,286,287,288,289,290,291,370,376,380,381,383,392,400,402,403,404,405,407,480,514,522,543,544,],[-95,-260,-96,281,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-95,-96,-260,-95,-95,-248,-257,-258,-251,-253,-254,-95,-97,-95,-95,-236,-219,-98,-226,-227,-230,-233,-244,-245,-242,-95,-95,-260,]),'PLUS':([116,125,135,136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,176,177,178,252,255,286,287,288,289,290,291,370,376,380,381,383,392,400,401,402,403,404,405,407,468,480,514,522,538,543,544,],[-95,-260,-96,279,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-95,-96,-260,-95,-95,-248,-257,-258,-251,-253,-254,-95,-97,-95,-95,-236,-219,-98,-223,-226,-227,-230,-233,-244,508,-245,-242,-95,508,-95,-260,]),'AROBA':([129,374,467,469,477,511,512,513,519,537,539,],[263,-265,-269,-267,-266,-271,-270,-268,547,-273,-272,]),'HIGHER':([136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,176,177,178,264,265,286,287,288,289,290,291,376,383,392,400,401,402,403,404,405,407,472,480,514,],[-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-95,-96,-260,392,-221,-248,-257,-258,-251,-253,-254,-97,-236,-219,-98,-223,-226,-227,-230,-233,-244,-220,-245,-242,]),'RBRACE':([136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,176,177,178,265,286,287,288,289,290,291,358,359,363,376,383,392,400,401,402,403,404,405,406,407,472,480,490,491,492,514,556,],[-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-95,-96,-260,-221,-248,-257,-258,-251,-253,-254,460,-336,463,-97,-236,-219,-98,-223,-226,-227,-230,-233,479,-244,-220,-245,527,-143,-144,-242,-142,]),'KWDIN':([136,141,142,143,144,145,146,147,148,149,150,151,152,155,157,159,176,177,178,195,196,286,287,288,289,290,291,330,376,383,392,400,401,402,403,404,405,407,440,480,514,],[-222,-224,-225,-228,-229,-231,-232,-234,-235,-237,-238,-239,-240,-247,-249,-259,-95,-96,-260,329,-93,-248,-257,-258,-251,-253,-254,-92,-97,-236,-219,-98,-223,-226,-227,-230,-233,-244,-94,-245,-242,]),'DOT':([159,267,268,269,270,271,272,273,276,277,287,288,289,290,291,376,377,395,399,400,],[-259,394,-314,-315,-316,-95,-96,-205,-199,-204,-257,-258,-251,-253,-254,-97,-203,-313,-202,-98,]),'KWDFOR':([162,163,],[294,295,]),'KWDMIRRORED':([166,301,302,303,304,305,306,308,486,487,526,605,606,],[299,299,-169,-170,-171,-172,-173,299,299,299,-174,299,299,]),'KWDBY':([166,292,293,301,302,303,304,305,306,308,412,413,414,416,417,486,487,515,516,526,545,605,606,609,610,],[300,411,-280,300,-169,-170,-171,-172,-173,300,411,-162,-163,-165,-166,300,300,411,411,-174,-164,300,300,411,411,]),'KWDSORRY':([166,292,293,300,301,302,303,304,305,306,308,411,412,413,414,416,417,422,486,487,515,516,526,545,605,606,609,610,],[302,413,-280,302,302,-169,-170,-171,-172,-173,302,413,413,-162,-163,-165,-166,413,302,302,413,413,-174,-164,302,302,413,413,]),'KWDRULEEQ':([166,300,301,302,303,304,305,306,308,486,487,526,605,606,],[303,303,303,-169,-170,-171,-172,-173,303,303,303,-174,303,303,]),'KWDBACKWARDSEARCH':([166,300,301,302,303,304,305,306,308,486,487,526,605,606,],[304,304,304,-169,-170,-171,-172,-173,304,304,304,-174,304,304,]),'KWDATTACK':([166,300,301,302,303,304,305,306,308,486,487,526,605,606,],[305,305,305,-169,-170,-171,-172,-173,305,305,305,-174,305,305,]),'KWDUNFINISHABLEDIFF':([166,300,301,302,303,304,305,306,308,486,487,526,605,606,],[306,306,306,-169,-170,-171,-172,-173,306,306,306,-174,306,306,]),'KWDSTEP':([166,300,301,302,303,304,305,306,308,486,487,526,605,606,],[307,307,307,-169,-170,-171,-172,-173,307,307,307,-174,307,307,]),'KWDSOURCES':([168,425,],[312,312,]),'KWDREUSE':([168,425,],[313,313,]),'KWDUSEINDUCTION':([168,425,],[314,314,]),'KWDHIDELEMMAEQUAL':([168,425,],[317,317,]),'KWDHEURISTICEQUAL':([168,425,],[318,318,]),'SLASH':([171,],[320,]),'RACTIONFACTARROW':([191,192,374,437,438,467,469,477,495,497,511,512,513,534,537,539,],[-262,-263,-265,-264,-261,-269,-267,-266,532,-264,-271,-270,-268,563,-273,-272,]),'KWDALLTRACES':([201,337,338,445,],[335,335,335,335,]),'KWDEXISTSTRACE':([201,337,338,445,],[336,336,336,336,]),'COLOREQUAL':([207,448,],[346,346,]),'COLOUREQUAL':([207,448,],[347,347,]),'KWDNODE':([248,278,396,397,474,475,],[377,399,377,399,377,399,]),'KWDSOLVED':([292,293,412,413,414,416,417,515,516,545,609,610,],[410,-280,410,-162,-163,-165,-166,410,410,-164,410,410,]),'KWDSIMPLIFY':([292,293,411,412,413,414,416,417,422,515,516,545,609,610,],[414,-280,414,414,-162,-163,-165,-166,414,414,414,-164,414,414,]),'KWDSOLVE':([292,293,411,412,413,414,416,417,422,515,516,545,609,610,],[415,-280,415,415,-162,-163,-165,-166,415,415,415,-164,415,415,]),'KWDCONTRADICTION':([292,293,411,412,413,414,416,417,422,515,516,545,609,610,],[416,-280,416,416,-162,-163,-165,-166,416,416,416,-164,416,416,]),'KWDINDUCTION':([292,293,411,412,413,414,416,417,422,515,516,545,609,610,],[417,-280,417,417,-162,-163,-165,-166,417,417,417,-164,417,417,]),'KWDQED':([299,302,303,304,305,306,410,413,414,416,417,419,420,481,482,524,525,526,540,541,545,550,551,552,554,555,567,568,569,571,572,590,591,593,597,598,600,612,613,615,616,618,619,620,621,],[-175,-169,-170,-171,-172,-173,-145,-162,-163,-165,-166,-176,-177,-146,-147,550,554,-174,568,572,-164,-180,590,-187,-181,593,597,-152,-157,600,-153,-184,-186,-185,-154,-156,-155,618,619,620,621,-189,-191,-159,-161,]),'KWDNEXT':([299,302,303,304,305,306,410,413,414,416,417,419,420,481,482,524,525,526,540,541,545,550,551,552,554,555,567,568,569,571,572,590,591,593,597,598,600,612,613,615,616,618,619,620,621,],[-175,-169,-170,-171,-172,-173,-145,-162,-163,-165,-166,-176,-177,-146,-147,553,553,-174,570,570,-164,-180,553,-187,-181,553,570,-152,-157,570,-153,-184,-186,-185,-154,-156,-155,-188,-190,-158,-160,-189,-191,-159,-161,]),'KWDCASE':([301,302,303,304,305,306,412,413,414,416,417,526,545,553,570,],[421,-169,-170,-171,-172,-173,483,-162,-163,-165,-166,-174,-164,592,599,]),'FORWARDARROW':([326,439,],[436,496,]),'LACTIONFACTARROW':([326,439,],[437,497,]),'HEXCOLOR':([344,345,346,347,451,],[452,452,-85,-86,500,]),'QUOTED_HEXCOLOR':([344,345,346,347,],[453,453,-85,-86,]),'HASH_QUOTED_HEXCOLOR':([344,345,346,347,],[454,454,-85,-86,]),'GOALTRIANGLE':([374,467,469,477,511,512,513,519,537,539,],[-265,-269,-267,-266,-271,-270,-268,546,-273,-272,]),'MINUS':([468,538,],[509,509,]),'KWDNOPRECOMP':([468,538,],[510,510,]),'KWDSPLITEQS':([484,],[521,]),'KWDPRIVATE':([493,],[529,]),'KWDDESTRUCTOR':([493,],[530,]),'LITTLE0':([546,574,575,576,577,578,579,580,581,582,583,584,585,603,],[576,576,-208,-209,-210,-211,-212,-213,-214,-215,-216,-217,-218,-207,]),'LITTLE1':([546,574,575,576,577,578,579,580,581,582,583,584,585,603,],[577,577,-208,-209,-210,-211,-212,-213,-214,-215,-216,-217,-218,-207,]),'LITTLE2':([546,574,575,576,577,578,579,580,581,582,583,584,585,603,],[578,578,-208,-209,-210,-211,-212,-213,-214,-215,-216,-217,-218,-207,]),'LITTLE3':([546,574,575,576,577,578,579,580,581,582,583,584,585,603,],[579,579,-208,-209,-210,-211,-212,-213,-214,-215,-216,-217,-218,-207,]),'LITTLE4':([546,574,575,576,577,578,579,580,581,582,583,584,585,603,],[580,580,-208,-209,-210,-211,-212,-213,-214,-215,-216,-217,-218,-207,]),'LITTLE5':([546,574,575,576,577,578,579,580,581,582,583,584,585,603,],[581,581,-208,-209,-210,-211,-212,-213,-214,-215,-216,-217,-218,-207,]),'LITTLE6':([546,574,575,576,577,578,579,580,581,582,583,584,585,603,],[582,582,-208,-209,-210,-211,-212,-213,-214,-215,-216,-217,-218,-207,]),'LITTLE7':([546,574,575,576,577,578,579,580,581,582,583,584,585,603,],[583,583,-208,-209,-210,-211,-212,-213,-214,-215,-216,-217,-218,-207,]),'LITTLE8':([546,574,575,576,577,578,579,580,581,582,583,584,585,603,],[584,584,-208,-209,-210,-211,-212,-213,-214,-215,-216,-217,-218,-207,]),'LITTLE9':([546,574,575,576,577,578,579,580,581,582,583,584,585,603,],[585,585,-208,-209,-210,-211,-212,-213,-214,-215,-216,-217,-218,-207,]),'GOALARROW':([611,],[617,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'security_protocol_theory':([0,],[1,]),'body':([4,],[5,]),'body_item':([4,5,],[6,51,]),'signature_spec':([4,5,],[7,7,]),'global_heuristic':([4,5,],[8,8,]),'rule':([4,5,54,211,],[9,9,95,350,]),'restriction':([4,5,],[10,10,]),'tactic':([4,5,],[11,11,]),'section':([4,5,],[12,12,]),'macro':([4,5,],[13,13,]),'axiom':([4,5,],[14,14,]),'predicate':([4,5,],[15,15,]),'lemma':([4,5,],[16,16,]),'test':([4,5,],[17,17,]),'diff_lemma':([4,5,],[18,18,]),'forgotten_comment':([4,5,],[19,19,]),'functions':([4,5,],[20,20,]),'equations':([4,5,],[21,21,]),'builtins':([4,5,],[22,22,]),'simple_rule':([4,5,54,55,211,212,],[24,24,24,97,24,351,]),'simple_rule_variant':([4,5,54,211,],[25,25,25,25,]),'diff_rule':([4,5,54,211,],[26,26,26,26,]),'tactic_hdr':([4,5,],[29,29,]),'lemma_header':([4,5,],[38,38,]),'simple_rule_hdr':([4,5,54,55,211,212,],[45,45,45,45,45,45,]),'simple_rule_header':([4,5,54,55,211,212,],[48,48,48,48,48,48,]),'variants':([24,],[53,]),'tactic_content':([29,59,],[58,104,]),'presort':([29,],[59,]),'prio_list':([29,59,],[60,60,]),'deprio_list':([29,59,60,],[61,61,105,]),'prio':([29,59,60,],[63,63,106,]),'deprio':([29,59,60,61,105,],[64,64,64,107,107,]),'lemma_body':([38,70,],[69,160,]),'lemma_acc':([38,],[70,]),'formula_start':([38,57,70,98,101,111,165,214,465,466,],[71,103,71,213,103,238,297,353,504,505,]),'lemma_list':([38,],[72,]),'simple_rule_body':([45,],[80,]),'let_block':([45,],[82,]),'modulo':([47,49,],[86,89,]),'goal_ranking_list':([52,],[90,]),'standard_goal_ranking':([52,90,108,],[91,209,219,]),'oracle_goal_ranking':([52,90,318,],[92,210,429,]),'simple_rule_list':([55,],[96,]),'restriction_attrs':([56,],[99,]),'restriction_list':([57,],[101,]),'restriction_elt':([57,101,],[102,217,]),'formula':([68,71,103,122,213,238,253,256,297,353,394,484,504,505,517,548,],[113,161,218,257,352,364,257,257,418,459,476,523,535,536,257,587,]),'imp':([68,71,103,122,213,238,241,242,243,244,253,256,297,353,394,484,504,505,517,548,],[114,114,114,114,114,114,367,368,369,371,114,114,114,114,114,114,114,114,114,114,]),'disjunction':([68,71,103,122,213,238,241,242,243,244,253,256,297,353,394,484,504,505,517,548,],[115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,]),'conjunction':([68,71,103,122,213,238,241,242,243,244,245,246,253,256,297,353,394,484,504,505,517,548,],[117,117,117,117,117,117,117,117,117,117,372,373,117,117,117,117,117,117,117,117,117,117,]),'negation':([68,71,103,122,213,238,241,242,243,244,245,246,249,250,253,256,297,353,394,484,504,505,517,548,],[118,118,118,118,118,118,118,118,118,118,118,118,378,379,118,118,118,118,118,118,118,118,118,118,]),'atom':([68,71,103,120,121,122,213,238,241,242,243,244,245,246,249,250,253,256,297,353,394,484,504,505,517,548,],[119,119,119,251,254,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,]),'quant_formula':([68,71,103,120,121,122,213,238,241,242,243,244,245,246,249,250,253,256,297,353,394,484,504,505,517,548,],[126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,]),'node_var':([68,71,103,120,121,122,132,213,238,241,242,243,244,245,246,249,250,253,256,260,261,262,263,267,297,353,394,484,504,505,517,547,548,574,622,],[128,128,128,128,128,128,270,128,128,128,128,128,128,128,128,128,128,128,128,385,389,390,391,270,128,128,128,128,128,128,542,586,128,602,623,]),'fact':([68,71,81,103,120,121,122,194,213,238,241,242,243,244,245,246,249,250,253,256,297,327,353,394,437,484,494,497,504,505,517,533,548,561,596,],[129,129,191,129,129,129,129,191,129,129,129,129,129,129,129,129,129,129,129,129,129,438,129,129,191,519,191,191,129,129,129,191,129,191,191,]),'msetterm':([68,71,103,120,121,122,130,175,213,238,241,242,243,244,245,246,247,249,250,253,256,266,284,285,297,331,353,384,394,398,484,504,505,517,548,],[131,131,131,131,131,259,265,265,131,131,131,131,131,131,131,131,265,131,131,259,259,393,265,265,131,440,131,472,131,265,131,131,131,259,131,]),'quantifier':([68,71,103,120,121,122,213,238,241,242,243,244,245,246,249,250,253,256,297,353,394,484,504,505,517,548,],[132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,]),'xorterm_list':([68,71,103,120,121,122,130,175,213,238,241,242,243,244,245,246,247,249,250,253,256,266,284,285,297,331,353,384,394,398,484,504,505,517,548,],[136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,]),'xorterm':([68,71,103,120,121,122,130,175,213,238,241,242,243,244,245,246,247,249,250,253,256,266,279,284,285,297,331,353,384,394,398,484,504,505,517,548,],[141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,401,141,141,141,141,141,141,141,141,141,141,141,141,141,]),'multterm_list':([68,71,103,120,121,122,130,175,213,238,241,242,243,244,245,246,247,249,250,253,256,266,279,284,285,297,331,353,384,394,398,484,504,505,517,548,],[142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,]),'multterm':([68,71,103,120,121,122,130,175,213,238,241,242,243,244,245,246,247,249,250,253,256,266,279,280,281,284,285,297,331,353,384,394,398,484,504,505,517,548,],[143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,402,403,143,143,143,143,143,143,143,143,143,143,143,143,143,]),'expterm_list':([68,71,103,120,121,122,130,175,213,238,241,242,243,244,245,246,247,249,250,253,256,266,279,280,281,284,285,297,331,353,384,394,398,484,504,505,517,548,],[144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,]),'expterm':([68,71,103,120,121,122,130,175,213,238,241,242,243,244,245,246,247,249,250,253,256,266,279,280,281,282,284,285,297,331,353,384,394,398,484,504,505,517,548,],[145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,404,145,145,145,145,145,145,145,145,145,145,145,145,145,]),'term_list':([68,71,103,120,121,122,130,175,213,238,241,242,243,244,245,246,247,249,250,253,256,266,279,280,281,282,284,285,297,331,353,384,394,398,484,504,505,517,548,],[146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,]),'term':([68,71,78,103,120,121,122,130,175,213,238,241,242,243,244,245,246,247,249,250,253,256,266,279,280,281,282,283,284,285,297,321,322,331,353,384,394,398,479,484,504,505,517,548,],[147,147,174,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,405,147,147,147,174,434,147,147,147,147,147,514,147,147,147,147,147,]),'tupleterm':([68,71,78,103,120,121,122,130,175,213,238,241,242,243,244,245,246,247,249,250,253,256,266,279,280,281,282,283,284,285,297,321,322,331,353,384,394,398,479,484,504,505,517,548,],[148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,]),'nullary_fun':([68,71,78,103,120,121,122,130,175,213,238,241,242,243,244,245,246,247,249,250,253,256,266,279,280,281,282,283,284,285,297,321,322,331,353,384,394,398,479,484,504,505,517,548,],[149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,]),'binary_app':([68,71,78,103,120,121,122,130,175,213,238,241,242,243,244,245,246,247,249,250,253,256,266,279,280,281,282,283,284,285,297,321,322,331,353,384,394,398,479,484,504,505,517,548,],[150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,]),'nary_app':([68,71,78,103,120,121,122,130,175,213,238,241,242,243,244,245,246,247,249,250,253,256,266,279,280,281,282,283,284,285,297,321,322,331,353,384,394,398,479,484,504,505,517,548,],[151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,]),'literal':([68,71,78,103,120,121,122,130,175,213,238,241,242,243,244,245,246,247,249,250,253,256,266,279,280,281,282,283,284,285,297,321,322,331,353,384,394,398,479,484,504,505,517,548,],[152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,]),'binary_fun':([68,71,78,103,120,121,122,130,175,213,238,241,242,243,244,245,246,247,249,250,253,256,266,279,280,281,282,283,284,285,297,321,322,331,353,384,394,398,479,484,504,505,517,548,],[153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,]),'nary_fun':([68,71,78,103,120,121,122,130,175,213,238,241,242,243,244,245,246,247,249,250,253,256,266,279,280,281,282,283,284,285,297,321,322,331,353,384,394,398,479,484,504,505,517,548,],[154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,]),'nonnode_var':([68,71,78,103,120,121,122,130,132,175,213,238,241,242,243,244,245,246,247,249,250,253,256,266,267,279,280,281,282,283,284,285,297,321,322,331,353,384,394,398,479,484,504,505,517,548,],[157,157,157,157,157,157,157,157,269,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,269,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,]),'msg_var':([68,71,78,83,103,120,121,122,130,132,175,195,213,238,241,242,243,244,245,246,247,249,250,253,256,266,267,279,280,281,282,283,284,285,297,321,322,331,353,384,394,398,479,484,504,505,517,548,],[159,159,159,197,159,159,159,159,159,159,159,197,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,]),'lemma_attrs':([76,85,203,],[167,202,339,]),'function_list':([77,],[169,]),'function_sym':([77,319,],[170,430,]),'equation_list':([78,],[172,]),'equation':([78,321,],[173,433,]),'builtin_list':([79,],[179,]),'builtin':([79,325,],[180,435,]),'facts':([81,194,437,494,497,533,561,596,],[190,328,495,531,534,562,594,608,]),'empty':([81,194,437,494,497,533,561,596,],[192,192,192,192,192,192,192,192,]),'let_block_stmt_list':([83,],[195,]),'let_block_stmt':([83,195,],[196,330,]),'rule_attrs':([88,208,],[206,349,]),'tactic_function_list':([109,110,460,463,],[220,236,502,503,]),'tactic_function':([109,110,220,236,460,463,502,503,],[222,222,357,357,222,222,357,357,]),'and_function_list':([109,110,220,236,460,463,502,503,],[223,223,223,223,223,223,223,223,]),'and_function':([109,110,220,236,360,460,463,502,503,],[224,224,224,224,461,224,224,224,224,]),'not_function_list':([109,110,220,236,360,460,463,502,503,],[225,225,225,225,225,225,225,225,225,]),'not_function':([109,110,220,236,360,361,460,463,502,503,],[226,226,226,226,226,462,226,226,226,226,]),'function_and_params':([109,110,220,228,236,360,361,460,463,502,503,],[227,227,227,362,227,227,227,227,227,227,227,]),'msetterm_list':([122,130,175,247,253,256,284,285,398,517,],[258,264,258,375,258,258,406,408,478,258,]),'lvar_list':([132,],[267,]),'lvar':([132,267,],[268,395,]),'formula_end':([161,218,352,364,418,459,535,536,],[292,356,458,464,485,501,564,565,]),'diff_proof_skeleton':([166,301,308,486,487,605,606,],[298,420,423,524,525,612,613,]),'diff_proof_method':([166,300,301,308,486,487,605,606,],[301,419,301,301,301,301,301,301,]),'lemma_attr_list':([168,],[309,]),'lemma_attr':([168,425,],[310,489,]),'lemma_attr_content':([168,425,],[311,311,]),'trace_quantifier':([201,337,338,445,],[334,443,444,498,]),'rule_attr_list':([207,],[342,]),'rule_attr':([207,448,],[343,499,]),'color_equal':([207,448,],[344,344,]),'colour_equal':([207,448,],[345,345,]),'post_ranking':([221,237,],[358,363,]),'proof_skeleton':([292,412,515,516,609,610,],[409,482,540,541,615,616,]),'proof_method':([292,411,412,422,515,516,609,610,],[412,481,412,488,412,412,412,412,]),'lemma_goal_rankings':([318,],[427,]),'arity':([320,],[431,]),'hexcolor':([344,345,],[449,455,]),'quoted_hexcolor':([344,345,],[450,456,]),'fact_annotes':([374,469,477,513,],[467,511,512,539,]),'lemma_goal_ranking_list':([428,],[490,]),'lemma_goal_ranking':([428,528,],[491,556,]),'fact_annote_list':([468,],[506,]),'fact_annote':([468,538,],[507,566,]),'goal':([484,],[518,]),'formula_list':([484,],[520,]),'diff_proof_skeleton_inner_list':([524,525,],[551,555,]),'diff_proof_skeleton_inner_elt':([524,525,551,555,],[552,552,591,591,]),'rbracket_reset_state':([531,562,594,608,],[560,595,607,614,]),'proof_skeleton_inner_list':([540,541,],[567,571,]),'proof_skeleton_inner_elt':([540,541,567,571,],[569,569,598,598,]),'natural_sub':([546,],[574,]),'little_digit':([546,574,],[575,603,]),'natural':([549,573,624,],[588,601,625,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> security_protocol_theory","S'",1,None,None,None),
  ('security_protocol_theory -> KWDTHEORY IDENT KWDBEGIN body KWDEND','security_protocol_theory',5,'p_security_protocol_theory','syntax.py',6),
  ('body -> body body_item','body',2,'p_body_1','syntax.py',10),
  ('body -> body_item','body',1,'p_body_2','syntax.py',17),
  ('body_item -> signature_spec','body_item',1,'p_body_item','syntax.py',23),
  ('body_item -> global_heuristic','body_item',1,'p_body_item','syntax.py',24),
  ('body_item -> rule','body_item',1,'p_body_item','syntax.py',25),
  ('body_item -> restriction','body_item',1,'p_body_item','syntax.py',26),
  ('body_item -> tactic','body_item',1,'p_body_item','syntax.py',27),
  ('body_item -> section','body_item',1,'p_body_item','syntax.py',28),
  ('body_item -> macro','body_item',1,'p_body_item','syntax.py',29),
  ('body_item -> axiom','body_item',1,'p_body_item','syntax.py',30),
  ('body_item -> predicate','body_item',1,'p_body_item','syntax.py',31),
  ('body_item -> lemma','body_item',1,'p_body_item','syntax.py',32),
  ('body_item -> test','body_item',1,'p_body_item','syntax.py',33),
  ('body_item -> diff_lemma','body_item',1,'p_body_item','syntax.py',34),
  ('body_item -> forgotten_comment','body_item',1,'p_body_item','syntax.py',35),
  ('test -> KWDTEST IDENT COLON formula_start formula formula_end','test',6,'p_test','syntax.py',41),
  ('forgotten_comment -> FORGOTTEN_COMMENT','forgotten_comment',1,'p_forgotten_comment','syntax.py',45),
  ('macro -> MACRO_INCLUDE','macro',1,'p_macro','syntax.py',49),
  ('macro -> MACRO_IFDEF','macro',1,'p_macro','syntax.py',50),
  ('macro -> MACRO_ELSE','macro',1,'p_macro','syntax.py',51),
  ('macro -> MACRO_ENDIF','macro',1,'p_macro','syntax.py',52),
  ('macro -> MACRO_DEFINE','macro',1,'p_macro','syntax.py',53),
  ('section -> SECTION','section',1,'p_section','syntax.py',57),
  ('signature_spec -> functions','signature_spec',1,'p_signature_spec','syntax.py',61),
  ('signature_spec -> equations','signature_spec',1,'p_signature_spec','syntax.py',62),
  ('signature_spec -> builtins','signature_spec',1,'p_signature_spec','syntax.py',63),
  ('functions -> KWDFUNCTIONS COLON function_list','functions',3,'p_functions','syntax.py',67),
  ('function_list -> function_list COMMA function_sym','function_list',3,'p_function_list_1','syntax.py',71),
  ('function_list -> function_sym','function_list',1,'p_function_list_2','syntax.py',77),
  ('function_sym -> IDENT SLASH arity','function_sym',3,'p_function_sym_1','syntax.py',82),
  ('function_sym -> IDENT SLASH arity LBRACKET KWDPRIVATE RBRACKET','function_sym',6,'p_function_sym_2','syntax.py',86),
  ('function_sym -> IDENT SLASH arity LBRACKET KWDDESTRUCTOR RBRACKET','function_sym',6,'p_function_sym_3','syntax.py',90),
  ('arity -> NATURAL','arity',1,'p_arity','syntax.py',94),
  ('equations -> KWDEQUATIONS COLON equation_list','equations',3,'p_equations','syntax.py',98),
  ('equation_list -> equation_list COMMA equation','equation_list',3,'p_equation_list_1','syntax.py',102),
  ('equation_list -> equation','equation_list',1,'p_equation_list_2','syntax.py',108),
  ('equation -> term EQUAL term','equation',3,'p_equation','syntax.py',113),
  ('builtins -> KWDBUILTINS COLON builtin_list','builtins',3,'p_builtins','syntax.py',117),
  ('builtin_list -> builtin_list COMMA builtin','builtin_list',3,'p_builtin_list_1','syntax.py',121),
  ('builtin_list -> builtin','builtin_list',1,'p_builtin_list_2','syntax.py',127),
  ('builtin -> KWDDIFFIEHELLMAN','builtin',1,'p_builtin','syntax.py',132),
  ('builtin -> KWDHASHING','builtin',1,'p_builtin','syntax.py',133),
  ('builtin -> KWDSYMMETRICENCRYPTION','builtin',1,'p_builtin','syntax.py',134),
  ('builtin -> KWDASYMMETRICENCRYPTION','builtin',1,'p_builtin','syntax.py',135),
  ('builtin -> KWDSIGNING','builtin',1,'p_builtin','syntax.py',136),
  ('builtin -> KWDBILINEARPAIRING','builtin',1,'p_builtin','syntax.py',137),
  ('builtin -> KWDXOR','builtin',1,'p_builtin','syntax.py',138),
  ('builtin -> KWDMULTISET','builtin',1,'p_builtin','syntax.py',139),
  ('builtin -> KWDREVEALINGSIGNING','builtin',1,'p_builtin','syntax.py',140),
  ('global_heuristic -> KWDHEURISTIC COLON goal_ranking_list','global_heuristic',3,'p_global_heuristic','syntax.py',144),
  ('goal_ranking_list -> goal_ranking_list standard_goal_ranking','goal_ranking_list',2,'p_goal_ranking_list','syntax.py',148),
  ('goal_ranking_list -> goal_ranking_list oracle_goal_ranking','goal_ranking_list',2,'p_goal_ranking_list_1','syntax.py',154),
  ('goal_ranking_list -> standard_goal_ranking','goal_ranking_list',1,'p_goal_ranking_list_2','syntax.py',160),
  ('goal_ranking_list -> oracle_goal_ranking','goal_ranking_list',1,'p_goal_ranking_list_3','syntax.py',165),
  ('standard_goal_ranking -> IDENT','standard_goal_ranking',1,'p_standard_goal_ranking','syntax.py',170),
  ('oracle_goal_ranking -> HEURISTICORACLE','oracle_goal_ranking',1,'p_oracle_goal_ranking','syntax.py',174),
  ('rule -> simple_rule','rule',1,'p_rule_1','syntax.py',178),
  ('rule -> simple_rule_variant','rule',1,'p_rule_1','syntax.py',179),
  ('rule -> diff_rule','rule',1,'p_rule_1','syntax.py',180),
  ('simple_rule_variant -> simple_rule variants','simple_rule_variant',2,'p_simple_rule_variant','syntax.py',184),
  ('diff_rule -> simple_rule KWDLEFT rule KWDRIGHT rule','diff_rule',5,'p_diff_rule','syntax.py',188),
  ('simple_rule -> simple_rule_hdr simple_rule_body','simple_rule',2,'p_simple_rule','syntax.py',192),
  ('simple_rule_hdr -> simple_rule_header','simple_rule_hdr',1,'p_simple_rule_hdr','syntax.py',196),
  ('simple_rule_header -> KWDRULE IDENT COLON','simple_rule_header',3,'p_simple_rule_header_1','syntax.py',201),
  ('simple_rule_header -> KWDRULE modulo IDENT COLON','simple_rule_header',4,'p_simple_rule_header_2','syntax.py',205),
  ('simple_rule_header -> KWDRULE IDENT rule_attrs COLON','simple_rule_header',4,'p_simple_rule_header_3','syntax.py',210),
  ('simple_rule_header -> KWDRULE modulo IDENT rule_attrs COLON','simple_rule_header',5,'p_simple_rule_header_4','syntax.py',215),
  ('simple_rule_body -> LBRACKET facts RBRACKET FORWARDARROW LBRACKET facts rbracket_reset_state','simple_rule_body',7,'p_simple_rule_body_1','syntax.py',221),
  ('simple_rule_body -> LBRACKET facts RBRACKET LACTIONFACTARROW facts RACTIONFACTARROW LBRACKET facts rbracket_reset_state','simple_rule_body',9,'p_simple_rule_body_2','syntax.py',227),
  ('simple_rule_body -> let_block LBRACKET facts RBRACKET FORWARDARROW LBRACKET facts rbracket_reset_state','simple_rule_body',8,'p_simple_rule_body_3','syntax.py',234),
  ('simple_rule_body -> let_block LBRACKET facts RBRACKET LACTIONFACTARROW facts RACTIONFACTARROW LBRACKET facts rbracket_reset_state','simple_rule_body',10,'p_simple_rule_body_4','syntax.py',241),
  ('rbracket_reset_state -> RBRACKET','rbracket_reset_state',1,'p_rbracket_reset_state','syntax.py',250),
  ('variants -> KWDVARIANTS simple_rule_list','variants',2,'p_variants','syntax.py',254),
  ('simple_rule_list -> simple_rule_list COMMA simple_rule','simple_rule_list',3,'p_simple_rule_list_1','syntax.py',258),
  ('simple_rule_list -> simple_rule','simple_rule_list',1,'p_simple_rule_list_2','syntax.py',264),
  ('modulo -> LPAREN KWDMODULO IDENT RPAREN','modulo',4,'p_modulo','syntax.py',269),
  ('rule_attrs -> LBRACKET rule_attr_list RBRACKET','rule_attrs',3,'p_rule_attrs','syntax.py',273),
  ('rule_attr_list -> rule_attr_list COMMA rule_attr','rule_attr_list',3,'p_rule_attr_list_1','syntax.py',277),
  ('rule_attr_list -> rule_attr','rule_attr_list',1,'p_rule_attr_list_2','syntax.py',283),
  ('rule_attr -> color_equal hexcolor','rule_attr',2,'p_rule_attr','syntax.py',288),
  ('rule_attr -> colour_equal hexcolor','rule_attr',2,'p_rule_attr','syntax.py',289),
  ('rule_attr -> color_equal quoted_hexcolor','rule_attr',2,'p_rule_attr','syntax.py',290),
  ('rule_attr -> colour_equal quoted_hexcolor','rule_attr',2,'p_rule_attr','syntax.py',291),
  ('color_equal -> COLOREQUAL','color_equal',1,'p_color_equal','syntax.py',295),
  ('colour_equal -> COLOUREQUAL','colour_equal',1,'p_colour_equal','syntax.py',299),
  ('hexcolor -> HASH HEXCOLOR','hexcolor',2,'p_hexcolor_1','syntax.py',303),
  ('hexcolor -> HEXCOLOR','hexcolor',1,'p_hexcolor_2','syntax.py',307),
  ('quoted_hexcolor -> QUOTED_HEXCOLOR','quoted_hexcolor',1,'p_quoted_hexcolor_1','syntax.py',311),
  ('quoted_hexcolor -> HASH_QUOTED_HEXCOLOR','quoted_hexcolor',1,'p_quoted_hexcolor_2','syntax.py',315),
  ('let_block -> KWDLET let_block_stmt_list KWDIN','let_block',3,'p_let_block','syntax.py',319),
  ('let_block_stmt_list -> let_block_stmt_list let_block_stmt','let_block_stmt_list',2,'p_let_block_stmt_list_1','syntax.py',323),
  ('let_block_stmt_list -> let_block_stmt','let_block_stmt_list',1,'p_let_block_stmt_list_2','syntax.py',329),
  ('let_block_stmt -> msg_var EQUAL msetterm','let_block_stmt',3,'p_let_block_stmt','syntax.py',334),
  ('msg_var -> IDENT','msg_var',1,'p_msg_var_1','syntax.py',338),
  ('msg_var -> IDENTDOTNATURAL','msg_var',1,'p_msg_var_2','syntax.py',342),
  ('msg_var -> IDENT COLON IDENT','msg_var',3,'p_msg_var_3','syntax.py',346),
  ('msg_var -> IDENTDOTNATURAL COLON IDENT','msg_var',3,'p_msg_var_4','syntax.py',350),
  ('restriction -> KWDRESTRICTION IDENT COLON formula_start formula formula_end','restriction',6,'p_restriction_1','syntax.py',354),
  ('restriction -> KWDRESTRICTION IDENT restriction_attrs COLON formula_start formula formula_end','restriction',7,'p_restriction_2','syntax.py',360),
  ('restriction -> KWDRESTRICTIONS COLON restriction_list','restriction',3,'p_restriction_3','syntax.py',367),
  ('restriction_list -> restriction_list restriction_elt','restriction_list',2,'p_restriction_list_1','syntax.py',372),
  ('restriction_list -> restriction_elt','restriction_list',1,'p_restriction_list_2','syntax.py',378),
  ('restriction_elt -> formula_start formula formula_end','restriction_elt',3,'p_restriction_elt','syntax.py',383),
  ('restriction_attrs -> LBRACKET KWDLEFT RBRACKET','restriction_attrs',3,'p_restriction_attrs','syntax.py',387),
  ('restriction_attrs -> LBRACKET KWDRIGHT RBRACKET','restriction_attrs',3,'p_restriction_attrs','syntax.py',388),
  ('axiom -> KWDAXIOM IDENT COLON formula_start formula formula_end','axiom',6,'p_axiom_1','syntax.py',392),
  ('axiom -> KWDAXIOM IDENT LBRACKET KWDRIGHT RBRACKET COLON formula_start formula formula_end','axiom',9,'p_axiom_2','syntax.py',397),
  ('axiom -> KWDAXIOM IDENT LBRACKET KWDLEFT RBRACKET COLON formula_start formula formula_end','axiom',9,'p_axiom_2','syntax.py',398),
  ('predicate -> KWDPREDICATE COLON formula','predicate',3,'p_predicate','syntax.py',404),
  ('lemma -> lemma_header lemma_body','lemma',2,'p_lemma_1','syntax.py',408),
  ('lemma -> lemma_header lemma_acc lemma_body','lemma',3,'p_lemma_2','syntax.py',412),
  ('lemma_header -> KWDLEMMA IDENT COLON','lemma_header',3,'p_lemma_header_1','syntax.py',417),
  ('lemma_header -> KWDLEMMA modulo IDENT COLON','lemma_header',4,'p_lemma_header_2','syntax.py',421),
  ('lemma_header -> KWDLEMMA IDENT lemma_attrs COLON','lemma_header',4,'p_lemma_header_3','syntax.py',426),
  ('lemma_header -> KWDLEMMA modulo IDENT lemma_attrs COLON','lemma_header',5,'p_lemma_header_4','syntax.py',431),
  ('lemma_header -> KWDLEMMA IDENT COLON trace_quantifier','lemma_header',4,'p_lemma_header_5','syntax.py',437),
  ('lemma_header -> KWDLEMMA modulo IDENT COLON trace_quantifier','lemma_header',5,'p_lemma_header_6','syntax.py',442),
  ('lemma_header -> KWDLEMMA IDENT lemma_attrs COLON trace_quantifier','lemma_header',5,'p_lemma_header_7','syntax.py',448),
  ('lemma_header -> KWDLEMMA modulo IDENT lemma_attrs COLON trace_quantifier','lemma_header',6,'p_lemma_header_8','syntax.py',454),
  ('lemma_acc -> lemma_list KWDACCOUNT KWDFOR','lemma_acc',3,'p_lemma_acc_1','syntax.py',461),
  ('lemma_acc -> lemma_list KWDACCOUNTS KWDFOR','lemma_acc',3,'p_lemma_acc_2','syntax.py',465),
  ('lemma_list -> lemma_list COMMA IDENT','lemma_list',3,'p_lemma_list_1','syntax.py',469),
  ('lemma_list -> IDENT','lemma_list',1,'p_lemma_list_2','syntax.py',475),
  ('lemma_body -> formula_start formula formula_end proof_skeleton','lemma_body',4,'p_lemma_body_1','syntax.py',480),
  ('lemma_body -> formula_start formula formula_end','lemma_body',3,'p_lemma_body_2','syntax.py',485),
  ('trace_quantifier -> KWDALLTRACES','trace_quantifier',1,'p_trace_quantifier','syntax.py',489),
  ('trace_quantifier -> KWDEXISTSTRACE','trace_quantifier',1,'p_trace_quantifier','syntax.py',490),
  ('lemma_attrs -> LBRACKET lemma_attr_list RBRACKET','lemma_attrs',3,'p_lemma_attrs','syntax.py',494),
  ('lemma_attr_list -> lemma_attr_list COMMA lemma_attr','lemma_attr_list',3,'p_lemma_attr_list_1','syntax.py',498),
  ('lemma_attr_list -> lemma_attr','lemma_attr_list',1,'p_lemma_attr_list_2','syntax.py',504),
  ('lemma_attr -> lemma_attr_content','lemma_attr',1,'p_lemma_attr','syntax.py',509),
  ('lemma_attr_content -> KWDSOURCES','lemma_attr_content',1,'p_lemma_attr_content_1','syntax.py',513),
  ('lemma_attr_content -> KWDREUSE','lemma_attr_content',1,'p_lemma_attr_content_1','syntax.py',514),
  ('lemma_attr_content -> KWDUSEINDUCTION','lemma_attr_content',1,'p_lemma_attr_content_1','syntax.py',515),
  ('lemma_attr_content -> KWDLEFT','lemma_attr_content',1,'p_lemma_attr_content_1','syntax.py',516),
  ('lemma_attr_content -> KWDRIGHT','lemma_attr_content',1,'p_lemma_attr_content_1','syntax.py',517),
  ('lemma_attr_content -> KWDHIDELEMMAEQUAL IDENT','lemma_attr_content',2,'p_lemma_attr_content_2','syntax.py',521),
  ('lemma_attr_content -> KWDHEURISTICEQUAL lemma_goal_rankings','lemma_attr_content',2,'p_lemma_attr_content_3','syntax.py',526),
  ('lemma_goal_rankings -> LBRACE lemma_goal_ranking_list RBRACE','lemma_goal_rankings',3,'p_lemma_goal_rankings_1','syntax.py',531),
  ('lemma_goal_rankings -> oracle_goal_ranking','lemma_goal_rankings',1,'p_lemma_goal_rankings_2','syntax.py',536),
  ('lemma_goal_ranking_list -> lemma_goal_ranking_list COMMA lemma_goal_ranking','lemma_goal_ranking_list',3,'p_lemma_goal_ranking_list_1','syntax.py',541),
  ('lemma_goal_ranking_list -> lemma_goal_ranking','lemma_goal_ranking_list',1,'p_lemma_goal_ranking_list_2','syntax.py',547),
  ('lemma_goal_ranking -> IDENT','lemma_goal_ranking',1,'p_lemma_goal_ranking','syntax.py',552),
  ('proof_skeleton -> KWDSOLVED','proof_skeleton',1,'p_proof_skeleton_1','syntax.py',556),
  ('proof_skeleton -> KWDBY proof_method','proof_skeleton',2,'p_proof_skeleton_2','syntax.py',560),
  ('proof_skeleton -> proof_method proof_skeleton','proof_skeleton',2,'p_proof_skeleton_3','syntax.py',564),
  ('proof_skeleton -> proof_method KWDCASE IDENT proof_skeleton','proof_skeleton',4,'p_proof_skeleton_4','syntax.py',570),
  ('proof_skeleton -> proof_method KWDCASE NATURAL proof_skeleton','proof_skeleton',4,'p_proof_skeleton_4','syntax.py',571),
  ('proof_skeleton -> proof_method KWDCASE IDENT proof_skeleton proof_skeleton_inner_list','proof_skeleton',5,'p_proof_skeleton_5','syntax.py',578),
  ('proof_skeleton -> proof_method KWDCASE NATURAL proof_skeleton proof_skeleton_inner_list','proof_skeleton',5,'p_proof_skeleton_5','syntax.py',579),
  ('proof_skeleton -> proof_method KWDCASE IDENT proof_skeleton KWDQED','proof_skeleton',5,'p_proof_skeleton_6','syntax.py',588),
  ('proof_skeleton -> proof_method KWDCASE NATURAL proof_skeleton KWDQED','proof_skeleton',5,'p_proof_skeleton_6','syntax.py',589),
  ('proof_skeleton -> proof_method KWDCASE IDENT proof_skeleton proof_skeleton_inner_list KWDQED','proof_skeleton',6,'p_proof_skeleton_7','syntax.py',597),
  ('proof_skeleton -> proof_method KWDCASE NATURAL proof_skeleton proof_skeleton_inner_list KWDQED','proof_skeleton',6,'p_proof_skeleton_7','syntax.py',598),
  ('proof_skeleton_inner_list -> proof_skeleton_inner_list proof_skeleton_inner_elt','proof_skeleton_inner_list',2,'p_proof_skeleton_inner_list_1','syntax.py',607),
  ('proof_skeleton_inner_list -> proof_skeleton_inner_elt','proof_skeleton_inner_list',1,'p_proof_skeleton_inner_list_2','syntax.py',613),
  ('proof_skeleton_inner_elt -> KWDNEXT KWDCASE IDENT proof_skeleton','proof_skeleton_inner_elt',4,'p_proof_skeleton_inner_elt','syntax.py',618),
  ('proof_skeleton_inner_elt -> KWDNEXT KWDCASE IDENT proof_skeleton KWDQED','proof_skeleton_inner_elt',5,'p_proof_skeleton_inner_elt','syntax.py',619),
  ('proof_skeleton_inner_elt -> KWDNEXT KWDCASE NATURAL proof_skeleton','proof_skeleton_inner_elt',4,'p_proof_skeleton_inner_elt','syntax.py',620),
  ('proof_skeleton_inner_elt -> KWDNEXT KWDCASE NATURAL proof_skeleton KWDQED','proof_skeleton_inner_elt',5,'p_proof_skeleton_inner_elt','syntax.py',621),
  ('proof_method -> KWDSORRY','proof_method',1,'p_proof_method','syntax.py',627),
  ('proof_method -> KWDSIMPLIFY','proof_method',1,'p_proof_method','syntax.py',628),
  ('proof_method -> KWDSOLVE LPAREN goal RPAREN','proof_method',4,'p_proof_method','syntax.py',629),
  ('proof_method -> KWDCONTRADICTION','proof_method',1,'p_proof_method','syntax.py',630),
  ('proof_method -> KWDINDUCTION','proof_method',1,'p_proof_method','syntax.py',631),
  ('diff_lemma -> KWDDIFFLEMMA IDENT COLON diff_proof_skeleton','diff_lemma',4,'p_diff_lemma_1','syntax.py',637),
  ('diff_lemma -> KWDDIFFLEMMA IDENT lemma_attrs COLON diff_proof_skeleton','diff_lemma',5,'p_diff_lemma_2','syntax.py',641),
  ('diff_proof_method -> KWDSORRY','diff_proof_method',1,'p_diff_proof_method','syntax.py',646),
  ('diff_proof_method -> KWDRULEEQ','diff_proof_method',1,'p_diff_proof_method','syntax.py',647),
  ('diff_proof_method -> KWDBACKWARDSEARCH','diff_proof_method',1,'p_diff_proof_method','syntax.py',648),
  ('diff_proof_method -> KWDATTACK','diff_proof_method',1,'p_diff_proof_method','syntax.py',649),
  ('diff_proof_method -> KWDUNFINISHABLEDIFF','diff_proof_method',1,'p_diff_proof_method','syntax.py',650),
  ('diff_proof_method -> KWDSTEP LPAREN proof_method RPAREN','diff_proof_method',4,'p_diff_proof_method','syntax.py',651),
  ('diff_proof_skeleton -> KWDMIRRORED','diff_proof_skeleton',1,'p_diff_proof_skeleton_1','syntax.py',657),
  ('diff_proof_skeleton -> KWDBY diff_proof_method','diff_proof_skeleton',2,'p_diff_proof_skeleton_2','syntax.py',661),
  ('diff_proof_skeleton -> diff_proof_method diff_proof_skeleton','diff_proof_skeleton',2,'p_diff_proof_skeleton_3','syntax.py',665),
  ('diff_proof_skeleton -> diff_proof_method KWDCASE IDENT diff_proof_skeleton','diff_proof_skeleton',4,'p_diff_proof_skeleton_4','syntax.py',671),
  ('diff_proof_skeleton -> diff_proof_method KWDCASE NATURAL diff_proof_skeleton','diff_proof_skeleton',4,'p_diff_proof_skeleton_4','syntax.py',672),
  ('diff_proof_skeleton -> diff_proof_method KWDCASE IDENT diff_proof_skeleton KWDQED','diff_proof_skeleton',5,'p_diff_proof_skeleton_5','syntax.py',679),
  ('diff_proof_skeleton -> diff_proof_method KWDCASE NATURAL diff_proof_skeleton KWDQED','diff_proof_skeleton',5,'p_diff_proof_skeleton_5','syntax.py',680),
  ('diff_proof_skeleton -> diff_proof_method KWDCASE IDENT diff_proof_skeleton diff_proof_skeleton_inner_list','diff_proof_skeleton',5,'p_diff_proof_skeleton_6','syntax.py',688),
  ('diff_proof_skeleton -> diff_proof_method KWDCASE NATURAL diff_proof_skeleton diff_proof_skeleton_inner_list','diff_proof_skeleton',5,'p_diff_proof_skeleton_6','syntax.py',689),
  ('diff_proof_skeleton -> diff_proof_method KWDCASE IDENT diff_proof_skeleton diff_proof_skeleton_inner_list KWDQED','diff_proof_skeleton',6,'p_diff_proof_skeleton_7','syntax.py',697),
  ('diff_proof_skeleton -> diff_proof_method KWDCASE NATURAL diff_proof_skeleton diff_proof_skeleton_inner_list KWDQED','diff_proof_skeleton',6,'p_diff_proof_skeleton_7','syntax.py',698),
  ('diff_proof_skeleton_inner_list -> diff_proof_skeleton_inner_list diff_proof_skeleton_inner_elt','diff_proof_skeleton_inner_list',2,'p_diff_proof_skeleton_inner_list_1','syntax.py',707),
  ('diff_proof_skeleton_inner_list -> diff_proof_skeleton_inner_elt','diff_proof_skeleton_inner_list',1,'p_diff_proof_skeleton_inner_list_2','syntax.py',713),
  ('diff_proof_skeleton_inner_elt -> KWDNEXT KWDCASE IDENT diff_proof_skeleton','diff_proof_skeleton_inner_elt',4,'p_diff_proof_skeleton_inner_elt','syntax.py',718),
  ('diff_proof_skeleton_inner_elt -> KWDNEXT KWDCASE IDENT diff_proof_skeleton KWDQED','diff_proof_skeleton_inner_elt',5,'p_diff_proof_skeleton_inner_elt','syntax.py',719),
  ('diff_proof_skeleton_inner_elt -> KWDNEXT KWDCASE NATURAL diff_proof_skeleton','diff_proof_skeleton_inner_elt',4,'p_diff_proof_skeleton_inner_elt','syntax.py',720),
  ('diff_proof_skeleton_inner_elt -> KWDNEXT KWDCASE NATURAL diff_proof_skeleton KWDQED','diff_proof_skeleton_inner_elt',5,'p_diff_proof_skeleton_inner_elt','syntax.py',721),
  ('goal -> fact GOALTRIANGLE natural_sub node_var','goal',4,'p_goal_1','syntax.py',727),
  ('goal -> fact AROBA node_var','goal',3,'p_goal_2','syntax.py',731),
  ('goal -> LPAREN node_var COMMA natural RPAREN GOALARROW LPAREN node_var COMMA natural RPAREN','goal',11,'p_goal_3','syntax.py',735),
  ('goal -> formula_list','goal',1,'p_goal_4','syntax.py',739),
  ('goal -> KWDSPLITEQS LPAREN natural RPAREN','goal',4,'p_goal_5','syntax.py',743),
  ('formula_list -> formula_list FORMULASEP formula','formula_list',3,'p_goal_formula_list_1','syntax.py',747),
  ('formula_list -> formula','formula_list',1,'p_goal_formula_list_2','syntax.py',753),
  ('node_var -> HASH IDENT','node_var',2,'p_node_var_1','syntax.py',758),
  ('node_var -> IDENT','node_var',1,'p_node_var_2','syntax.py',762),
  ('node_var -> IDENTDOTNATURAL','node_var',1,'p_node_var_3','syntax.py',766),
  ('node_var -> IDENTDOTNATURAL COLON KWDNODE','node_var',3,'p_node_var_4','syntax.py',770),
  ('node_var -> IDENT COLON KWDNODE','node_var',3,'p_node_var_5','syntax.py',774),
  ('node_var -> HASH IDENTDOTNATURAL','node_var',2,'p_node_var_6','syntax.py',778),
  ('node_var -> NATURAL','node_var',1,'p_node_var_7','syntax.py',782),
  ('natural -> NATURAL','natural',1,'p_natural','syntax.py',786),
  ('natural_sub -> natural_sub little_digit','natural_sub',2,'p_natural_sub_1','syntax.py',790),
  ('natural_sub -> little_digit','natural_sub',1,'p_natural_sub_2','syntax.py',796),
  ('little_digit -> LITTLE0','little_digit',1,'p_little_digit','syntax.py',801),
  ('little_digit -> LITTLE1','little_digit',1,'p_little_digit','syntax.py',802),
  ('little_digit -> LITTLE2','little_digit',1,'p_little_digit','syntax.py',803),
  ('little_digit -> LITTLE3','little_digit',1,'p_little_digit','syntax.py',804),
  ('little_digit -> LITTLE4','little_digit',1,'p_little_digit','syntax.py',805),
  ('little_digit -> LITTLE5','little_digit',1,'p_little_digit','syntax.py',806),
  ('little_digit -> LITTLE6','little_digit',1,'p_little_digit','syntax.py',807),
  ('little_digit -> LITTLE7','little_digit',1,'p_little_digit','syntax.py',808),
  ('little_digit -> LITTLE8','little_digit',1,'p_little_digit','syntax.py',809),
  ('little_digit -> LITTLE9','little_digit',1,'p_little_digit','syntax.py',810),
  ('tupleterm -> LOWER msetterm_list HIGHER','tupleterm',3,'p_tupleterm','syntax.py',817),
  ('msetterm_list -> msetterm_list COMMA msetterm','msetterm_list',3,'p_msetterm_list','syntax.py',821),
  ('msetterm_list -> msetterm','msetterm_list',1,'p_msetterm_list','syntax.py',822),
  ('msetterm -> xorterm_list','msetterm',1,'p_msetterm','syntax.py',831),
  ('xorterm_list -> xorterm_list PLUS xorterm','xorterm_list',3,'p_xorterm_list','syntax.py',835),
  ('xorterm_list -> xorterm','xorterm_list',1,'p_xorterm_list','syntax.py',836),
  ('xorterm -> multterm_list','xorterm',1,'p_xorterm','syntax.py',845),
  ('multterm_list -> multterm_list OPXOR multterm','multterm_list',3,'p_multterm_list','syntax.py',849),
  ('multterm_list -> multterm_list XORSYMBOL multterm','multterm_list',3,'p_multterm_list','syntax.py',850),
  ('multterm_list -> multterm','multterm_list',1,'p_multterm_list','syntax.py',851),
  ('multterm -> expterm_list','multterm',1,'p_multterm','syntax.py',860),
  ('expterm_list -> expterm_list MULTIPLY expterm','expterm_list',3,'p_expterm_list','syntax.py',864),
  ('expterm_list -> expterm','expterm_list',1,'p_expterm_list','syntax.py',865),
  ('expterm -> term_list','expterm',1,'p_expterm','syntax.py',874),
  ('term_list -> term_list EXPONENTIAL term','term_list',3,'p_term_list','syntax.py',878),
  ('term_list -> term','term_list',1,'p_term_list','syntax.py',879),
  ('term -> tupleterm','term',1,'p_term','syntax.py',888),
  ('term -> LPAREN msetterm_list RPAREN','term',3,'p_term','syntax.py',889),
  ('term -> nullary_fun','term',1,'p_term','syntax.py',890),
  ('term -> binary_app','term',1,'p_term','syntax.py',891),
  ('term -> nary_app','term',1,'p_term','syntax.py',892),
  ('term -> literal','term',1,'p_term','syntax.py',893),
  ('nullary_fun -> IDENT','nullary_fun',1,'p_nullary_fun','syntax.py',901),
  ('binary_app -> binary_fun LBRACE msetterm_list RBRACE term','binary_app',5,'p_binary_app','syntax.py',905),
  ('binary_fun -> IDENT','binary_fun',1,'p_binary_fun','syntax.py',909),
  ('nary_app -> nary_fun LPAREN RPAREN','nary_app',3,'p_nary_app','syntax.py',913),
  ('nary_app -> nary_fun LPAREN msetterm_list RPAREN','nary_app',4,'p_nary_app','syntax.py',914),
  ('nary_fun -> IDENT','nary_fun',1,'p_nary_fun','syntax.py',921),
  ('literal -> LITERAL','literal',1,'p_literal_1','syntax.py',925),
  ('literal -> TILDE LITERAL','literal',2,'p_literal_2','syntax.py',929),
  ('literal -> nonnode_var','literal',1,'p_literal_3','syntax.py',933),
  ('nonnode_var -> IDENT','nonnode_var',1,'p_nonnode_var_1_1','syntax.py',937),
  ('nonnode_var -> DOLLAR IDENT','nonnode_var',2,'p_nonnode_var_1_2','syntax.py',941),
  ('nonnode_var -> IDENTDOTNATURAL','nonnode_var',1,'p_nonnode_var_1_3','syntax.py',945),
  ('nonnode_var -> DOLLAR IDENTDOTNATURAL','nonnode_var',2,'p_nonnode_var_1_4','syntax.py',949),
  ('nonnode_var -> DOLLAR NATURAL','nonnode_var',2,'p_nonnode_var_1_5','syntax.py',953),
  ('nonnode_var -> IDENT COLON IDENT','nonnode_var',3,'p_nonnode_var_2_1','syntax.py',957),
  ('nonnode_var -> IDENTDOTNATURAL COLON IDENT','nonnode_var',3,'p_nonnode_var_2_2','syntax.py',961),
  ('nonnode_var -> TILDE IDENT','nonnode_var',2,'p_nonnode_var_3_1','syntax.py',965),
  ('nonnode_var -> TILDE IDENTDOTNATURAL','nonnode_var',2,'p_nonnode_var_3_2','syntax.py',969),
  ('nonnode_var -> msg_var','nonnode_var',1,'p_nonnode_var_5_1','syntax.py',973),
  ('nonnode_var -> NATURAL','nonnode_var',1,'p_nonnode_var_6','syntax.py',977),
  ('facts -> facts COMMA fact','facts',3,'p_facts_1','syntax.py',981),
  ('facts -> fact','facts',1,'p_facts_2','syntax.py',987),
  ('facts -> empty','facts',1,'p_facts_2','syntax.py',988),
  ('empty -> <empty>','empty',0,'p_empty','syntax.py',993),
  ('fact -> IDENT LPAREN RPAREN','fact',3,'p_fact_1','syntax.py',997),
  ('fact -> BANG IDENT LPAREN RPAREN','fact',4,'p_fact_2','syntax.py',1001),
  ('fact -> IDENT LPAREN msetterm_list RPAREN','fact',4,'p_fact_3','syntax.py',1005),
  ('fact -> BANG IDENT LPAREN msetterm_list RPAREN','fact',5,'p_fact_4','syntax.py',1009),
  ('fact -> IDENT LPAREN RPAREN fact_annotes','fact',4,'p_fact_5','syntax.py',1013),
  ('fact -> BANG IDENT LPAREN RPAREN fact_annotes','fact',5,'p_fact_6','syntax.py',1017),
  ('fact -> IDENT LPAREN msetterm_list RPAREN fact_annotes','fact',5,'p_fact_7','syntax.py',1021),
  ('fact -> BANG IDENT LPAREN msetterm_list RPAREN fact_annotes','fact',6,'p_fact_8','syntax.py',1025),
  ('fact_annotes -> LBRACKET fact_annote_list RBRACKET','fact_annotes',3,'p_fact_annotes','syntax.py',1029),
  ('fact_annote_list -> fact_annote_list COMMA fact_annote','fact_annote_list',3,'p_fact_annote_list','syntax.py',1033),
  ('fact_annote_list -> fact_annote','fact_annote_list',1,'p_fact_annote_list','syntax.py',1034),
  ('fact_annote -> PLUS','fact_annote',1,'p_fact_annote','syntax.py',1043),
  ('fact_annote -> MINUS','fact_annote',1,'p_fact_annote','syntax.py',1044),
  ('fact_annote -> KWDNOPRECOMP','fact_annote',1,'p_fact_annote','syntax.py',1045),
  ('formula_start -> DOUBLEQUOTE','formula_start',1,'p_formula_start','syntax.py',1049),
  ('formula_end -> DOUBLEQUOTE','formula_end',1,'p_formula_end','syntax.py',1054),
  ('formula -> imp','formula',1,'p_formula_1','syntax.py',1059),
  ('formula -> imp EQUIVALENT imp','formula',3,'p_formula_2','syntax.py',1063),
  ('formula -> imp UNIEQUIVALENT imp','formula',3,'p_formula_3','syntax.py',1067),
  ('imp -> disjunction','imp',1,'p_imp_1','syntax.py',1071),
  ('imp -> disjunction IMPLY imp','imp',3,'p_imp_2','syntax.py',1075),
  ('imp -> disjunction UNIIMPLY imp','imp',3,'p_imp_3','syntax.py',1079),
  ('imp -> disjunction IMPLY IDENT','imp',3,'p_imp_4','syntax.py',1083),
  ('disjunction -> disjunction DISJUNCTION conjunction','disjunction',3,'p_disjunction','syntax.py',1087),
  ('disjunction -> disjunction UNIDISJUNCTION conjunction','disjunction',3,'p_disjunction','syntax.py',1088),
  ('disjunction -> conjunction','disjunction',1,'p_disjunction','syntax.py',1089),
  ('conjunction -> conjunction CONJUNCTION negation','conjunction',3,'p_conjunction','syntax.py',1096),
  ('conjunction -> conjunction UNICONJUNCTION negation','conjunction',3,'p_conjunction','syntax.py',1097),
  ('conjunction -> negation','conjunction',1,'p_conjunction','syntax.py',1098),
  ('negation -> atom','negation',1,'p_negation_1','syntax.py',1105),
  ('negation -> KWDNOT atom','negation',2,'p_negation_2','syntax.py',1109),
  ('negation -> UNINOT atom','negation',2,'p_negation_2','syntax.py',1110),
  ('negation -> KWDNOT IDENT','negation',2,'p_negation_3','syntax.py',1114),
  ('negation -> UNINOT IDENT','negation',2,'p_negation_3','syntax.py',1115),
  ('negation -> KWDNOT LPAREN IDENT RPAREN','negation',4,'p_negation_4','syntax.py',1119),
  ('negation -> UNINOT LPAREN IDENT RPAREN','negation',4,'p_negation_4','syntax.py',1120),
  ('atom -> UNIFALSE','atom',1,'p_atom_1','syntax.py',1124),
  ('atom -> UNITRUE','atom',1,'p_atom_1','syntax.py',1125),
  ('atom -> IDENT','atom',1,'p_atom_1','syntax.py',1126),
  ('atom -> NATURAL','atom',1,'p_atom_1','syntax.py',1127),
  ('atom -> quant_formula','atom',1,'p_atom_2','syntax.py',1133),
  ('atom -> LPAREN formula RPAREN','atom',3,'p_atom_3','syntax.py',1137),
  ('atom -> KWDLAST LPAREN node_var RPAREN','atom',4,'p_atom_3','syntax.py',1138),
  ('atom -> fact AROBA node_var','atom',3,'p_atom_4','syntax.py',1145),
  ('atom -> node_var LOWER node_var','atom',3,'p_atom_4','syntax.py',1146),
  ('atom -> msetterm EQUAL msetterm','atom',3,'p_atom_4','syntax.py',1147),
  ('atom -> node_var EQUAL node_var','atom',3,'p_atom_4','syntax.py',1148),
  ('quant_formula -> quantifier lvar_list DOT formula','quant_formula',4,'p_quant_formula','syntax.py',1152),
  ('lvar_list -> lvar_list lvar','lvar_list',2,'p_lvar_list','syntax.py',1156),
  ('lvar_list -> lvar','lvar_list',1,'p_lvar_list','syntax.py',1157),
  ('lvar -> nonnode_var','lvar',1,'p_lvar','syntax.py',1166),
  ('lvar -> node_var','lvar',1,'p_lvar','syntax.py',1167),
  ('quantifier -> KWDEXISTS','quantifier',1,'p_quantifier','syntax.py',1171),
  ('quantifier -> UNIEXISTS','quantifier',1,'p_quantifier','syntax.py',1172),
  ('quantifier -> KWDFORALL','quantifier',1,'p_quantifier','syntax.py',1173),
  ('quantifier -> UNIFORALL','quantifier',1,'p_quantifier','syntax.py',1174),
  ('tactic -> tactic_hdr tactic_content','tactic',2,'p_tactic_1','syntax.py',1178),
  ('tactic -> tactic_hdr presort tactic_content','tactic',3,'p_tactic_2','syntax.py',1182),
  ('tactic_hdr -> KWDTACTIC COLON IDENT','tactic_hdr',3,'p_tactic_hdr','syntax.py',1187),
  ('presort -> KWDPRESORT COLON standard_goal_ranking','presort',3,'p_presort','syntax.py',1191),
  ('tactic_content -> prio_list','tactic_content',1,'p_tactic_content_1','syntax.py',1195),
  ('tactic_content -> deprio_list','tactic_content',1,'p_tactic_content_2','syntax.py',1200),
  ('tactic_content -> prio_list deprio_list','tactic_content',2,'p_tactic_content_3','syntax.py',1205),
  ('prio_list -> prio_list prio','prio_list',2,'p_prio_list','syntax.py',1211),
  ('prio_list -> prio','prio_list',1,'p_prio_list','syntax.py',1212),
  ('deprio_list -> deprio_list deprio','deprio_list',2,'p_deprio_list','syntax.py',1221),
  ('deprio_list -> deprio','deprio_list',1,'p_deprio_list','syntax.py',1222),
  ('prio -> KWDPRIO COLON tactic_function_list','prio',3,'p_prio_1','syntax.py',1231),
  ('prio -> KWDPRIO COLON LBRACE post_ranking RBRACE tactic_function_list','prio',6,'p_prio_2','syntax.py',1235),
  ('deprio -> KWDDEPRIO COLON tactic_function_list','deprio',3,'p_deprio_1','syntax.py',1240),
  ('deprio -> KWDDEPRIO COLON LBRACE post_ranking RBRACE tactic_function_list','deprio',6,'p_deprio_2','syntax.py',1244),
  ('post_ranking -> IDENT','post_ranking',1,'p_post_ranking','syntax.py',1249),
  ('tactic_function_list -> tactic_function_list tactic_function','tactic_function_list',2,'p_tactic_function_list','syntax.py',1253),
  ('tactic_function_list -> tactic_function','tactic_function_list',1,'p_tactic_function_list','syntax.py',1254),
  ('tactic_function -> and_function_list','tactic_function',1,'p_function','syntax.py',1263),
  ('and_function_list -> and_function_list DISJUNCTION and_function','and_function_list',3,'p_and_function_list','syntax.py',1267),
  ('and_function_list -> and_function','and_function_list',1,'p_and_function_list','syntax.py',1268),
  ('and_function -> not_function_list','and_function',1,'p_and_function','syntax.py',1277),
  ('not_function_list -> not_function_list CONJUNCTION not_function','not_function_list',3,'p_not_function_list','syntax.py',1281),
  ('not_function_list -> not_function','not_function_list',1,'p_not_function_list','syntax.py',1282),
  ('not_function -> function_and_params','not_function',1,'p_not_function_1','syntax.py',1291),
  ('not_function -> KWDNOT function_and_params','not_function',2,'p_not_function_2','syntax.py',1295),
  ('function_and_params -> REGEX_STRING','function_and_params',1,'p_function_and_params','syntax.py',1300),
  ('function_and_params -> ISFACTNAME_STRING','function_and_params',1,'p_function_and_params','syntax.py',1301),
  ('function_and_params -> ISINFACTTERMS_STRING','function_and_params',1,'p_function_and_params','syntax.py',1302),
  ('function_and_params -> DHRENOISE_STRING','function_and_params',1,'p_function_and_params','syntax.py',1303),
  ('function_and_params -> DEFAULTNOISE_STRING','function_and_params',1,'p_function_and_params','syntax.py',1304),
  ('function_and_params -> REASONABLENONCESNOISE_STRING','function_and_params',1,'p_function_and_params','syntax.py',1305),
  ('function_and_params -> NONABSURDGOAL_STRING','function_and_params',1,'p_function_and_params','syntax.py',1306),
]
