theory ISO9798_3_4_979834_reuse_always_1 begin

// Function signature and definition of the equational theory E

functions: derive/1, fst/1, pair/2, pk/1, sid1_mut_cr/0, sid2_mut_cr/0,
           sign/3, snd/1, true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(m, s, n), m, pk(s)) = true





rule (modulo E) MisgenerateRandoms:
   [ Fr( ~RA1 ) ] --[ MisgenerateOnlyOnce( ) ]-> [ !Random1( ~RA1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) GenRandom3:
   [ Fr( ~n23 ) ] --> [ Random3( ~n23 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) GenRandom2:
   [ Fr( ~n12 ) ] --> [ Random2( ~n12 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) GenRandom0:
   [ Fr( ~RB0 ) ] --> [ Random0( ~RB0 ) ]

  /* has exactly the trivial AC variant */

restriction RestrMisgeneratesOnlyOnce:
  "∀ #i #j.
    ((MisgenerateOnlyOnce( ) @ #i) ∧ (MisgenerateOnlyOnce( ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

restriction ineq:
  "∀ x y #i. (InEq( x, y ) @ #i) ⇒ (¬(x = y))"
  // safety formula

rule (modulo E) n_leak:
   [ In( sign(m, s, n) ), In( n ), In( m ), !Key( s ) ] --> [ Out( s ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) n_reuse:
   [
   In( sign(m1, s, n) ), In( sign(m2, s, n) ), In( m1 ), In( m2 ), !Key( s )
   ]
  --[ InEq( m1, m2 ) ]->
   [ Out( s ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) CreateKeyPair:
   [ Fr( ~x ) ] --> [ !Pk( $A, pk(~x) ), Out( pk(~x) ), !Ltk( $A, ~x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) RevLtk:
   [ !Ltk( A, k ) ] --[ RevLtk( A ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) CreateAssociation:
   [ In( <$IdA, $IdB> ), !Ltk( $IdA, ~ska ), !Ltk( $IdB, ~skb ) ]
  -->
   [ !RoleA( $IdA, $IdB, ~ska ), !RoleB( $IdA, $IdB, ~skb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) CreateSession:
   [ !RoleA( $IdA, $IdB, ~ska ), !RoleB( $IdA, $IdB, ~skb ) ]
  -->
   [ StartA( $IdA, $IdB, ~ska ), StartB( $IdA, $IdB, ~skb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) RoleB_1:
   [ StartB( $IdA, $IdB, ~skb ), Random0( ~RB ), Fr( ~Text1 ) ]
  --[
  BSendElt( $IdA, $IdB, ~skb, ~Text1, ~RB ), BStarted( $IdA, $IdB, ~RB )
  ]->
   [ Out( <~RB, ~Text1> ), Step1B( $IdA, $IdB, ~skb, ~RB ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) RoleA_1:
   [
   StartA( $IdA, $IdB, ~ska ), !Random1( ~RA ), Random2( ~n1 ),
   In( <RB, Text1> ), Fr( ~Text2 ), Fr( ~Text3 )
   ]
  --[
  ASendTokenAB( $IdA, $IdB, ~ska, ~RA, RB, $IdB, ~Text2, ~Text3 ),
  AStarted( $IdA, $IdB, ~RA, RB )
  ]->
   [
   Out( <$IdA, ~Text3, <sid1_mut_cr, ~RA, RB, $IdB, ~Text2>, 
         sign(<sid1_mut_cr, ~RA, RB, $IdB, ~Text2>, ~ska, ~n1)>
   ),
   Step1A( $IdA, $IdB, ~ska, ~RA, RB, ~Text2, ~Text3 ), !Key( ~ska )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) RoleB_2:
   [
   Step1B( $IdA, $IdB, ~skb, ~RB ),
   In( <$IdA, Text3, <sid1_mut_cr, RA, ~RB, $IdB, Text2>, s> ),
   Fr( ~Text4 ), Fr( ~Text5 ), Random3( ~n2 ), !Pk( $IdA, pka )
   ]
  --[
  Eq( verify(s, <sid1_mut_cr, RA, ~RB, $IdB, Text2>, pka), true ),
  BRecvTokenAB( $IdA, $IdB, ~skb, RA, ~RB, $IdB, Text2, Text3 ),
  BSendTokenBA( $IdA, $IdB, ~skb, ~RB, RA, $IdA, ~Text4, ~Text5 ),
  BEnded( $IdA, $IdB, RA, ~RB )
  ]->
   [
   Out( <$IdB, ~Text5, <sid2_mut_cr, ~RB, RA, $IdA, ~Text4>, 
         sign(<sid2_mut_cr, ~RB, RA, $IdA, ~Text4>, ~skb, ~n2)>
   ),
   !Key( ~skb )
   ]

  /*
  rule (modulo AC) RoleB_2:
     [
     Step1B( $IdA, $IdB, ~skb, ~RB ),
     In( <$IdA, Text3, <sid1_mut_cr, RA, ~RB, $IdB, Text2>, s> ),
     Fr( ~Text4 ), Fr( ~Text5 ), Random3( ~n2 ), !Pk( $IdA, pka )
     ]
    --[
    Eq( z, true ),
    BRecvTokenAB( $IdA, $IdB, ~skb, RA, ~RB, $IdB, Text2, Text3 ),
    BSendTokenBA( $IdA, $IdB, ~skb, ~RB, RA, $IdA, ~Text4, ~Text5 ),
    BEnded( $IdA, $IdB, RA, ~RB )
    ]->
     [
     Out( <$IdB, ~Text5, <sid2_mut_cr, ~RB, RA, $IdA, ~Text4>, 
           sign(<sid2_mut_cr, ~RB, RA, $IdA, ~Text4>, ~skb, ~n2)>
     ),
     !Key( ~skb )
     ]
    variants (modulo AC)
    1. $IdB  = $IdB.14
       ~RB   = ~RB.14
       RA    = RA.14
       Text2 = Text2.14
       pka   = pka.14
       s     = s.14
       z     = verify(s.14, <sid1_mut_cr, RA.14, ~RB.14, $IdB.14, Text2.14>,
                      pka.14)
    
    2. $IdB  = $x.14
       ~RB   = ~x.15
       RA    = x.20
       Text2 = x.21
       pka   = pk(x.23)
       s     = sign(<sid1_mut_cr, x.20, ~x.15, $x.14, x.21>, x.23, x.24)
       z     = true
  */

rule (modulo E) RoleA_2:
   [
   Step1A( $IdA, $IdB, ~ska, ~RA, RB, ~Text2, ~Text3 ),
   In( <$IdB, Text5, <sid2_mut_cr, RB, ~RA, $IdA, Text4>, s> ),
   !Pk( $IdB, pkb )
   ]
  --[
  Eq( verify(s, <sid2_mut_cr, RB, ~RA, $IdA, Text4>, pkb), true ),
  ARecvTokenBA( $IdA, $IdB, ~ska, RB, ~RA, $IdA, Text4, Text5 ),
  AEnded( $IdA, $IdB, ~RA, RB )
  ]->
   [ ]

  /*
  rule (modulo AC) RoleA_2:
     [
     Step1A( $IdA, $IdB, ~ska, ~RA, RB, ~Text2, ~Text3 ),
     In( <$IdB, Text5, <sid2_mut_cr, RB, ~RA, $IdA, Text4>, s> ),
     !Pk( $IdB, pkb )
     ]
    --[
    Eq( z, true ),
    ARecvTokenBA( $IdA, $IdB, ~ska, RB, ~RA, $IdA, Text4, Text5 ),
    AEnded( $IdA, $IdB, ~RA, RB )
    ]->
     [ ]
    variants (modulo AC)
    1. $IdA  = $IdA.13
       ~RA   = ~RA.13
       RB    = RB.13
       Text4 = Text4.13
       pkb   = pkb.13
       s     = s.13
       z     = verify(s.13, <sid2_mut_cr, RB.13, ~RA.13, $IdA.13, Text4.13>,
                      pkb.13)
    
    2. $IdA  = $x.13
       ~RA   = ~x.15
       RB    = x.19
       Text4 = x.20
       pkb   = pk(x.22)
       s     = sign(<sid2_mut_cr, x.19, ~x.15, $x.13, x.20>, x.22, x.23)
       z     = true
  */

restriction RestrEq:
  "∀ a b #i. (Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

lemma mut_ts_functional:
  exists-trace
  "∃ ida1 idb1 sk1 ra1 rb1 text41 text51 ida2 idb2 sk2 ra2 rb2 text42
     text52 #i #j.
    (((((BSendTokenBA( ida1, idb1, sk1, rb1, ra1, ida1, text41, text51
         ) @ #i) ∧
        (ARecvTokenBA( ida2, idb2, sk2, rb2, ra2, ida2, text42, text52 ) @ #j)) ∧
       (¬(∃ #r. RevLtk( ida1 ) @ #r))) ∧
      (¬(∃ #r. RevLtk( idb1 ) @ #r))) ∧
     (¬(∃ #r. RevLtk( ida2 ) @ #r))) ∧
    (¬(∃ #r. RevLtk( idb2 ) @ #r))"
/*
guarded formula characterizing all satisfying traces:
"∃ ida1 idb1 sk1 ra1 rb1 text41 text51 ida2 idb2 sk2 ra2 rb2 text42
   text52 #i #j.
  (BSendTokenBA( ida1, idb1, sk1, rb1, ra1, ida1, text41, text51 ) @ #i) ∧
  (ARecvTokenBA( ida2, idb2, sk2, rb2, ra2, ida2, text42, text52 ) @ #j)
 ∧
  (∀ #r. (RevLtk( ida1 ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( idb1 ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( ida2 ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( idb2 ) @ #r) ⇒ ⊥)"
*/
simplify
solve( Step1B( $IdA, $IdB, ~skb, ~RB ) ▶₀ #i )
  case RoleB_1
  solve( Random3( ~n2 ) ▶₄ #i )
    case GenRandom3
    solve( !Pk( $IdA, pk(x) ) ▶₅ #i )
      case CreateKeyPair
      solve( Step1A( $IdA.1, $IdB.1, ~ska, ~RA, rb2, ~Text2.1, ~Text3.1
             ) ▶₀ #j )
        case RoleA_1
        solve( !Pk( $IdB.1, pk(x.2) ) ▶₂ #j )
          case CreateKeyPair
          solve( !KU( sign(<sid1_mut_cr, ra1, ~RB, $IdB, Text2>, ~x, x.1)
                 ) @ #vk.15 )
            case RoleA_1
            solve( !KU( sign(<sid2_mut_cr, rb2, ~RA, $IdA.1, text42>, ~x.1, x.2)
                   ) @ #vk.32 )
              case RoleB_2
              solve( !KU( sign(<sid1_mut_cr, ~RA, ~RB.1, $IdB.1, Text2.2>, ~x.2, x.3)
                     ) @ #vk.44 )
                case RoleA_1
                solve( !KU( ~RB ) @ #vk.21 )
                  case RoleB_1
                  solve( !KU( ~RA ) @ #vk.18 )
                    case RoleA_1
                    solve( !KU( ~Text2 ) @ #vk.29 )
                      case RoleA_1
                      solve( !KU( ~RB.1 ) @ #vk.36 )
                        case RoleB_1
                        solve( !KU( ~Text4.1 ) @ #vk.41 )
                          case RoleB_2
                          solve( !KU( ~Text2.2 ) @ #vk.45 )
                            case RoleA_1
                            SOLVED // trace found
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma agree_a:
  all-traces
  "∀ ida idb ra rb #i.
    (AEnded( ida, idb, ra, rb ) @ #i) ⇒
    (((∃ #j.
        ((BEnded( ida, idb, ra, rb ) @ #j) ∧ (#j < #i)) ∧
        (¬(∃ ida2 idb2 #i2.
            (AEnded( ida2, idb2, ra, rb ) @ #i2) ∧ (¬(#i = #i2))))) ∨
      (∃ #r. RevLtk( ida ) @ #r)) ∨
     (∃ #r. RevLtk( idb ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ ida idb ra rb #i.
  (AEnded( ida, idb, ra, rb ) @ #i)
 ∧
  (∀ #j.
    (BEnded( ida, idb, ra, rb ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ ida2 idb2 #i2. (AEnded( ida2, idb2, ra, rb ) @ #i2) ∧ ¬(#i = #i2)))) ∧
  (∀ #r. (RevLtk( ida ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( idb ) @ #r) ⇒ ⊥)"
*/
simplify
solve( Step1A( $IdA, $IdB, ~ska, ~RA, rb, ~Text2, ~Text3 ) ▶₀ #i )
  case RoleA_1
  solve( !Pk( $IdB, pk(x) ) ▶₂ #i )
    case CreateKeyPair
    solve( !KU( sign(<sid2_mut_cr, rb, ~RA, $IdA, Text4>, ~x, x.1)
           ) @ #vk.16 )
      case RoleB_2
      solve( (#i < #i2)  ∥ (#i2 < #i) )
        case case_1
        solve( Step1A( $IdA.1, $IdB.1, ~ska.1, ~RA, ~RB, ~Text2.1, ~Text3.1
               ) ▶₀ #i2 )
          case RoleA_1
          solve( !Pk( $IdB.1, pk(x.1) ) ▶₂ #i2 )
            case CreateKeyPair
            solve( !KU( sign(<sid1_mut_cr, ~RA, ~RB, $IdB, Text2.2>, ~x.3, x.4)
                   ) @ #vk.35 )
              case RoleA_1
              solve( !KU( sign(<sid2_mut_cr, ~RB, ~RA, $IdA.1, Text4.1>, ~x.1, x.2)
                     ) @ #vk.43 )
                case RoleB_2
                solve( !KU( ~RA ) @ #vk.25 )
                  case RoleA_1
                  solve( !KU( ~RB ) @ #vk.21 )
                    case RoleB_1
                    solve( !KU( ~Text4 ) @ #vk.28 )
                      case RoleB_2
                      solve( !KU( ~Text2.2 ) @ #vk.32 )
                        case RoleA_1
                        SOLVED // trace found
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma agree_b:
  all-traces
  "∀ ida idb ra rb #i.
    (BEnded( ida, idb, ra, rb ) @ #i) ⇒
    (((∃ #j.
        ((AStarted( ida, idb, ra, rb ) @ #j) ∧ (#j < #i)) ∧
        (¬(∃ ida2 idb2 #i2.
            (BEnded( ida2, idb2, ra, rb ) @ #i2) ∧ (¬(#i = #i2))))) ∨
      (∃ #r. RevLtk( ida ) @ #r)) ∨
     (∃ #r. RevLtk( idb ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ ida idb ra rb #i.
  (BEnded( ida, idb, ra, rb ) @ #i)
 ∧
  (∀ #j.
    (AStarted( ida, idb, ra, rb ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ ida2 idb2 #i2. (BEnded( ida2, idb2, ra, rb ) @ #i2) ∧ ¬(#i = #i2)))) ∧
  (∀ #r. (RevLtk( ida ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( idb ) @ #r) ⇒ ⊥)"
*/
simplify
solve( Step1B( $IdA, $IdB, ~skb, ~RB ) ▶₀ #i )
  case RoleB_1
  solve( Random3( ~n2 ) ▶₄ #i )
    case GenRandom3
    solve( !Pk( $IdA, pk(x) ) ▶₅ #i )
      case CreateKeyPair
      solve( !KU( sign(<sid1_mut_cr, ra, ~RB, $IdB, Text2>, ~x, x.1)
             ) @ #vk.15 )
        case RoleA_1
        solve( (#i < #i2)  ∥ (#i2 < #i) )
          case case_1
          solve( Step1B( $IdA.1, $IdB.1, ~skb.1, ~RB ) ▶₀ #i2 )
            case RoleB_1
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( Step1B( $IdA.1, $IdB.1, ~skb.1, ~RB ) ▶₀ #i2 )
            case RoleB_1
            by contradiction /* cyclic */
          qed
        qed
      next
        case c_sign
        solve( !KU( ~x ) @ #vk.16 )
          case RevLtk
          by contradiction /* from formulas */
        next
          case n_leak_case_1
          solve( !KU( sign(m, ~x, n) ) @ #vk.19 )
            case RoleA_1
            by solve( !KU( ~n1 ) @ #vk.22 )
          next
            case RoleB_2
            by solve( !KU( ~n2.1 ) @ #vk.23 )
          next
            case c_sign
            by contradiction /* cyclic */
          qed
        next
          case n_leak_case_2
          solve( !KU( sign(m, ~x, n) ) @ #vk.21 )
            case RoleA_1
            by solve( !KU( ~n1 ) @ #vk.26 )
          next
            case RoleB_2
            by solve( !KU( ~n2.1 ) @ #vk.27 )
          next
            case c_sign
            by contradiction /* cyclic */
          qed
        next
          case n_reuse_case_1
          solve( !KU( sign(m1, ~x, n) ) @ #vk.19 )
            case RoleA_1
            solve( !KU( sign(m2, ~x, ~n1) ) @ #vk.22 )
              case RoleA_1
              by contradiction /* from formulas */
            next
              case c_sign
              by contradiction /* cyclic */
            qed
          next
            case RoleB_2
            solve( !KU( sign(m2, ~x, ~n2.1) ) @ #vk.23 )
              case RoleB_2
              by contradiction /* from formulas */
            next
              case c_sign
              by contradiction /* cyclic */
            qed
          next
            case c_sign
            by contradiction /* cyclic */
          qed
        next
          case n_reuse_case_2
          solve( !KU( sign(m1, ~x, n) ) @ #vk.21 )
            case RoleA_1
            solve( !KU( sign(m2, ~x, ~n1) ) @ #vk.26 )
              case RoleA_1
              by contradiction /* from formulas */
            next
              case c_sign
              by contradiction /* cyclic */
            qed
          next
            case RoleB_2
            solve( !KU( sign(m2, ~x, ~n2.1) ) @ #vk.27 )
              case RoleB_2
              by contradiction /* from formulas */
            next
              case c_sign
              by contradiction /* cyclic */
            qed
          next
            case c_sign
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  qed
qed

lemma noninj_agree_a:
  all-traces
  "∀ ida idb ra rb #i.
    (AEnded( ida, idb, ra, rb ) @ #i) ⇒
    (((∃ #j. (BEnded( ida, idb, ra, rb ) @ #j) ∧ (#j < #i)) ∨
      (∃ #r. RevLtk( ida ) @ #r)) ∨
     (∃ #r. RevLtk( idb ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ ida idb ra rb #i.
  (AEnded( ida, idb, ra, rb ) @ #i)
 ∧
  (∀ #j. (BEnded( ida, idb, ra, rb ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #r. (RevLtk( ida ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( idb ) @ #r) ⇒ ⊥)"
*/
simplify
solve( Step1A( $IdA, $IdB, ~ska, ~RA, rb, ~Text2, ~Text3 ) ▶₀ #i )
  case RoleA_1
  solve( !Pk( $IdB, pk(x) ) ▶₂ #i )
    case CreateKeyPair
    solve( !KU( sign(<sid2_mut_cr, rb, ~RA, $IdA, Text4>, ~x, x.1)
           ) @ #vk.16 )
      case RoleB_2
      by contradiction /* from formulas */
    next
      case c_sign
      solve( !KU( ~x ) @ #vk.18 )
        case RevLtk
        by contradiction /* from formulas */
      next
        case n_leak_case_1
        solve( !KU( sign(m, ~x, n) ) @ #vk.21 )
          case RoleA_1
          by solve( !KU( ~n1.1 ) @ #vk.24 )
        next
          case RoleB_2
          by solve( !KU( ~n2 ) @ #vk.25 )
        next
          case c_sign
          by contradiction /* cyclic */
        qed
      next
        case n_leak_case_2
        solve( !KU( sign(m, ~x, n) ) @ #vk.22 )
          case RoleA_1
          by solve( !KU( ~n1.1 ) @ #vk.26 )
        next
          case RoleB_2
          by solve( !KU( ~n2 ) @ #vk.27 )
        next
          case c_sign
          by contradiction /* cyclic */
        qed
      next
        case n_reuse_case_1
        solve( !KU( sign(m1, ~x, n) ) @ #vk.21 )
          case RoleA_1
          solve( !KU( sign(m2, ~x, ~n1.1) ) @ #vk.24 )
            case RoleA_1
            by contradiction /* from formulas */
          next
            case c_sign
            by contradiction /* cyclic */
          qed
        next
          case RoleB_2
          solve( !KU( sign(m2, ~x, ~n2) ) @ #vk.25 )
            case RoleB_2
            by contradiction /* from formulas */
          next
            case c_sign
            by contradiction /* cyclic */
          qed
        next
          case c_sign
          by contradiction /* cyclic */
        qed
      next
        case n_reuse_case_2
        solve( !KU( sign(m1, ~x, n) ) @ #vk.22 )
          case RoleA_1
          solve( !KU( sign(m2, ~x, ~n1.1) ) @ #vk.26 )
            case RoleA_1
            by contradiction /* from formulas */
          next
            case c_sign
            by contradiction /* cyclic */
          qed
        next
          case RoleB_2
          solve( !KU( sign(m2, ~x, ~n2) ) @ #vk.27 )
            case RoleB_2
            by contradiction /* from formulas */
          next
            case c_sign
            by contradiction /* cyclic */
          qed
        next
          case c_sign
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
qed

lemma noninj_agree_b:
  all-traces
  "∀ ida idb ra rb #i.
    (BEnded( ida, idb, ra, rb ) @ #i) ⇒
    (((∃ #j. (AStarted( ida, idb, ra, rb ) @ #j) ∧ (#j < #i)) ∨
      (∃ #r. RevLtk( ida ) @ #r)) ∨
     (∃ #r. RevLtk( idb ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ ida idb ra rb #i.
  (BEnded( ida, idb, ra, rb ) @ #i)
 ∧
  (∀ #j. (AStarted( ida, idb, ra, rb ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #r. (RevLtk( ida ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( idb ) @ #r) ⇒ ⊥)"
*/
simplify
solve( Step1B( $IdA, $IdB, ~skb, ~RB ) ▶₀ #i )
  case RoleB_1
  solve( Random3( ~n2 ) ▶₄ #i )
    case GenRandom3
    solve( !Pk( $IdA, pk(x) ) ▶₅ #i )
      case CreateKeyPair
      solve( !KU( sign(<sid1_mut_cr, ra, ~RB, $IdB, Text2>, ~x, x.1)
             ) @ #vk.15 )
        case RoleA_1
        by contradiction /* from formulas */
      next
        case c_sign
        solve( !KU( ~x ) @ #vk.16 )
          case RevLtk
          by contradiction /* from formulas */
        next
          case n_leak_case_1
          solve( !KU( sign(m, ~x, n) ) @ #vk.19 )
            case RoleA_1
            by solve( !KU( ~n1 ) @ #vk.22 )
          next
            case RoleB_2
            by solve( !KU( ~n2.1 ) @ #vk.23 )
          next
            case c_sign
            by contradiction /* cyclic */
          qed
        next
          case n_leak_case_2
          solve( !KU( sign(m, ~x, n) ) @ #vk.21 )
            case RoleA_1
            by solve( !KU( ~n1 ) @ #vk.26 )
          next
            case RoleB_2
            by solve( !KU( ~n2.1 ) @ #vk.27 )
          next
            case c_sign
            by contradiction /* cyclic */
          qed
        next
          case n_reuse_case_1
          solve( !KU( sign(m1, ~x, n) ) @ #vk.19 )
            case RoleA_1
            solve( !KU( sign(m2, ~x, ~n1) ) @ #vk.22 )
              case RoleA_1
              by contradiction /* from formulas */
            next
              case c_sign
              by contradiction /* cyclic */
            qed
          next
            case RoleB_2
            solve( !KU( sign(m2, ~x, ~n2.1) ) @ #vk.23 )
              case RoleB_2
              by contradiction /* from formulas */
            next
              case c_sign
              by contradiction /* cyclic */
            qed
          next
            case c_sign
            by contradiction /* cyclic */
          qed
        next
          case n_reuse_case_2
          solve( !KU( sign(m1, ~x, n) ) @ #vk.21 )
            case RoleA_1
            solve( !KU( sign(m2, ~x, ~n1) ) @ #vk.26 )
              case RoleA_1
              by contradiction /* from formulas */
            next
              case c_sign
              by contradiction /* cyclic */
            qed
          next
            case RoleB_2
            solve( !KU( sign(m2, ~x, ~n2.1) ) @ #vk.27 )
              case RoleB_2
              by contradiction /* from formulas */
            next
              case c_sign
              by contradiction /* cyclic */
            qed
          next
            case c_sign
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  qed
qed





















/*
WARNING: the following wellformedness checks failed!

Message Derivation Checks
=========================

  The variables of the following rule(s) are not derivable from their premises, you may be performing unintended pattern matching.

Rule n_reuse: 
Failed to derive Variable(s): n
*/

/*
Generated from:
Tamarin version 1.10.0
Maude version 3.3
Git revision: UNKNOWN, branch: UNKNOWN
Compiled at: 2025-01-20 17:15:39.562956625 UTC
*/

end

==============================================================================
summary of summaries:

analyzed: 979834_reuse_always_1.spthy

  processing time: 10.36s
  
  WARNING: 1 wellformedness check failed!
           The analysis results might be wrong!
  
  mut_ts_functional (exists-trace): verified (16 steps)
  agree_a (all-traces): falsified - found trace (14 steps)
  agree_b (all-traces): verified (36 steps)
  noninj_agree_a (all-traces): verified (31 steps)
  noninj_agree_b (all-traces): verified (32 steps)

==============================================================================
