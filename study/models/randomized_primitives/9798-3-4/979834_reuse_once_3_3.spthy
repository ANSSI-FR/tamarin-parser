theory ISO9798_3_4_979834_reuse_once_3_3
begin

functions: sid1_mut_cr/0,
		sid2_mut_cr/0,
		sign/3,
		verify/3,
		pk/1,
		true/0,
		derive/1

equations: verify(sign(m, s, n), m, pk(s)) = true

rule MisGenerateRandoms:
	[
		Fr(~n23)
	]
	--[
		MisgenerateOnlyOnce()
	]->
	[
		Random3(~n23),
		Random3(~n23)
	]

rule GenRandom3:
	[
		Fr(~n23)
	]
	-->
	[
		Random3(~n23)
	]

rule GenRandom2:
	[
		Fr(~n12)
	]
	-->
	[
		Random2(~n12)
	]

rule GenRandom1:
	[
		Fr(~RA1)
	]
	-->
	[
		Random1(~RA1)
	]

rule GenRandom0:
	[
		Fr(~RB0)
	]
	-->
	[
		Random0(~RB0)
	]

#ifdef nmisuse
restriction RestrMisgeneratesOnlyOnce:
"All #i #j . MisgenerateOnlyOnce() @i & MisgenerateOnlyOnce() @j ==> #i = #j"

restriction ineq:
	"All x y #i . 
	InEq(x, y) @ i ==> not (x = y)"

rule n_leak:
	[
		In(sign(m, s, n)),
		In(n),
		In(m),
		!Key(s)
	]
	-->
	[
		Out(s)
	]

rule n_reuse:
	[
		In(sign(m1, s, n)),
		In(sign(m2, s, n)),
		In(m1),
		In(m2),
		!Key(s)
	]
	--[
		InEq(m1, m2)
	]->
	[
		Out(s)
	]

#endif
rule CreateKeyPair:
	[
		Fr(~x)
	]
	-->
	[
		!Pk($A, pk(~x)),
		Out(pk(~x)),
		!Ltk($A, ~x)
	]

rule RevLtk:
	[
		!Ltk(A, k)
	]
	--[
		RevLtk(A)
	]->
	[
		Out(k)
	]

rule CreateAssociation:
	[
		In(< $IdA, $IdB >),
		!Ltk($IdA, ~ska),
		!Ltk($IdB, ~skb)
	]
	-->
	[
		!RoleA($IdA, $IdB, ~ska),
		!RoleB($IdA, $IdB, ~skb)
	]

rule CreateSession:
	[
		!RoleA($IdA, $IdB, ~ska),
		!RoleB($IdA, $IdB, ~skb)
	]
	-->
	[
		StartA($IdA, $IdB, ~ska),
		StartB($IdA, $IdB, ~skb)
	]

rule RoleB_1:
	[
		StartB($IdA, $IdB, ~skb),
		Random0(~RB),
		Fr(~Text1)
	]
	--[
		BSendElt($IdA, $IdB, ~skb, ~Text1, ~RB),
		BStarted($IdA, $IdB, ~RB)
	]->
	[
		Out(< ~RB, ~Text1 >),
		Step1B($IdA, $IdB, ~skb, ~RB)
	]

rule RoleA_1:
	[
		StartA($IdA, $IdB, ~ska),
		Random1(~RA),
		Random2(~n1),
		In(< RB, Text1 >),
		Fr(~Text2),
		Fr(~Text3)
	]
	--[
		ASendTokenAB($IdA, $IdB, ~ska, ~RA, RB, $IdB, ~Text2, ~Text3),
		AStarted($IdA, $IdB, ~RA, RB)
	]->
	[
		Out(< $IdA, ~Text3, < sid1_mut_cr, ~RA, RB, $IdB, ~Text2 >, sign(< sid1_mut_cr, ~RA, RB, $IdB, ~Text2 >, ~ska, ~n1) >),
		Step1A($IdA, $IdB, ~ska, ~RA, RB, ~Text2, ~Text3),
		!Key(~ska)
	]

rule RoleB_2:
	[
		Step1B($IdA, $IdB, ~skb, ~RB),
		In(< $IdA, Text3, < sid1_mut_cr, RA, ~RB, $IdB, Text2 >, s >),
		Fr(~Text4),
		Fr(~Text5),
		Random3(~n2),
		!Pk($IdA, pka)
	]
	--[
		Eq(verify(s, < sid1_mut_cr, RA, ~RB, $IdB, Text2 >, pka), true),
		BRecvTokenAB($IdA, $IdB, ~skb, RA, ~RB, $IdB, Text2, Text3),
		BSendTokenBA($IdA, $IdB, ~skb, ~RB, RA, $IdA, ~Text4, ~Text5),
		BEnded($IdA, $IdB, RA, ~RB)
	]->
	[
		Out(< $IdB, ~Text5, < sid2_mut_cr, ~RB, RA, $IdA, ~Text4 >, sign(< sid2_mut_cr, ~RB, RA, $IdA, ~Text4 >, ~skb, ~n2) >),
		!Key(~skb)
	]

rule RoleA_2:
	[
		Step1A($IdA, $IdB, ~ska, ~RA, RB, ~Text2, ~Text3),
		In(< $IdB, Text5, < sid2_mut_cr, RB, ~RA, $IdA, Text4 >, s >),
		!Pk($IdB, pkb)
	]
	--[
		Eq(verify(s, < sid2_mut_cr, RB, ~RA, $IdA, Text4 >, pkb), true),
		ARecvTokenBA($IdA, $IdB, ~ska, RB, ~RA, $IdA, Text4, Text5),
		AEnded($IdA, $IdB, ~RA, RB)
	]->
	[
		
	]

restriction RestrEq:
	"All a b #i . 
	Eq(a, b) @ i ==> (a = b)"

lemma mut_ts_functional: exists-trace
" Ex ida1 idb1 sk1 ra1 rb1 text41 text51 ida2 idb2 sk2 ra2 rb2 text42 text52 #i #j . 
	BSendTokenBA(ida1, idb1, sk1, rb1, ra1, ida1, text41, text51) @ i & ARecvTokenBA(ida2, idb2, sk2, rb2, ra2, ida2, text42, text52) @ j & not (Ex #r . 
	RevLtk(ida1) @ r) & not (Ex #r . 
	RevLtk(idb1) @ r) & not (Ex #r . 
	RevLtk(ida2) @ r) & not (Ex #r . 
	RevLtk(idb2) @ r) "

lemma agree_a:
" All ida idb ra rb #i . 
	AEnded(ida, idb, ra, rb) @ i ==> (Ex #j . 
	BEnded(ida, idb, ra, rb) @ j & j < i & not (Ex ida2 idb2 #i2 . 
	AEnded(ida2, idb2, ra, rb) @ i2 & not (#i = #i2))) | (Ex #r . 
	RevLtk(ida) @ r) | (Ex #r . 
	RevLtk(idb) @ r) "

lemma agree_b:
" All ida idb ra rb #i . 
	BEnded(ida, idb, ra, rb) @ i ==> (Ex #j . 
	AStarted(ida, idb, ra, rb) @ j & j < i & not (Ex ida2 idb2 #i2 . 
	BEnded(ida2, idb2, ra, rb) @ i2 & not (#i = #i2))) | (Ex #r . 
	RevLtk(ida) @ r) | (Ex #r . 
	RevLtk(idb) @ r) "

lemma noninj_agree_a:
" All ida idb ra rb #i . 
	AEnded(ida, idb, ra, rb) @ i ==> (Ex #j . 
	BEnded(ida, idb, ra, rb) @ j & j < i) | (Ex #r . 
	RevLtk(ida) @ r) | (Ex #r . 
	RevLtk(idb) @ r) "

lemma noninj_agree_b:
" All ida idb ra rb #i . 
	BEnded(ida, idb, ra, rb) @ i ==> (Ex #j . 
	AStarted(ida, idb, ra, rb) @ j & j < i) | (Ex #r . 
	RevLtk(ida) @ r) | (Ex #r . 
	RevLtk(idb) @ r) "


end
