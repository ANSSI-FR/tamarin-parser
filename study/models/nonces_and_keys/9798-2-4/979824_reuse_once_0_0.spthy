theory ISO9798_2_4_979824_reuse_once_0_0
begin

functions: aead_enc/2,
		aead_dec/2,
		sid1_mut_cr/0,
		sid2_mut_cr/0

equations: aead_dec(k, aead_enc(k, m)) = m

rule MisGenerateNonces:
	[
		Fr(~RB0)
	]
	--[
		MisgenerateOnlyOnce()
	]->
	[
		Nonce0(~RB0),
		Nonce0(~RB0)
	]

rule GenNonce1:
	[
		Fr(~RA1)
	]
	-->
	[
		Nonce1(~RA1)
	]

rule GenNonce0:
	[
		Fr(~RB0)
	]
	-->
	[
		Nonce0(~RB0)
	]

rule AttackerInitRoles:
	[
		
	]
	--[
		
	]->
	[
		Out(< $IdA, $IdB >)
	]

rule CreateAssociation:
	[
		In(< $IdA, $IdB >),
		Fr(~kAB)
	]
	-->
	[
		!RoleA($IdA, $IdB, ~kAB),
		!RoleB($IdA, $IdB, ~kAB),
		!Ltk($IdA, ~kAB),
		!Ltk($IdB, ~kAB)
	]

rule RevLtk:
	[
		!Ltk(A, k)
	]
	--[
		RevLtk(A)
	]->
	[
		Out(k)
	]

rule CreateSession:
	[
		!RoleA($IdA, $IdB, ~kAB),
		!RoleB($IdA, $IdB, ~kAB)
	]
	-->
	[
		StartA($IdA, $IdB, ~kAB),
		StartB($IdA, $IdB, ~kAB)
	]

rule RoleB_1:
	[
		StartB($IdA, $IdB, ~kAB),
		Nonce0(~RB),
		Fr(~Text1)
	]
	--[
		BSendElt($IdA, $IdB, ~kAB, ~Text1, ~RB),
		BStarted($IdA, $IdB, ~RB)
	]->
	[
		Out(< ~RB, ~Text1 >),
		Step1B($IdA, $IdB, ~kAB, ~RB)
	]

rule RoleA_1:
	[
		StartA($IdA, $IdB, ~kAB),
		Nonce1(~RA),
		In(< RB, Text1 >),
		Fr(~Text2),
		Fr(~Text3)
	]
	--[
		ASendTokenAB($IdA, $IdB, ~kAB, ~RA, RB, $IdB, ~Text2, ~Text3),
		AStarted($IdA, $IdB, ~RA, RB)
	]->
	[
		Out(< ~Text3, aead_enc(~kAB, < sid1_mut_cr, ~RA, RB, $IdB, ~Text2 >) >),
		Step1A($IdA, $IdB, ~kAB, ~RA, RB, ~Text2, ~Text3)
	]

rule RoleB_2:
	[
		Step1B($IdA, $IdB, ~kAB, ~RB),
		In(< Text3, aead_enc(~kAB, < sid1_mut_cr, RA, ~RB, $IdB, Text2 >) >),
		Fr(~Text4),
		Fr(~Text5)
	]
	--[
		BRecvTokenAB($IdA, $IdB, ~kAB, RA, ~RB, $IdB, Text2, Text3),
		BSendTokenBA($IdA, $IdB, ~kAB, RA, $IdB, ~Text4, ~Text5),
		BEnded($IdA, $IdB, RA, ~RB)
	]->
	[
		Out(< ~Text5, aead_enc(~kAB, < sid2_mut_cr, RA, $IdB, ~Text4 >) >)
	]

rule RoleA_2:
	[
		Step1A($IdA, $IdB, ~kAB, ~RA, RB, ~Text2, ~Text3),
		In(< Text5, aead_enc(~kAB, < sid2_mut_cr, ~RA, $IdB, Text4 >) >)
	]
	--[
		ARecvTokenBA($IdA, $IdB, ~kAB, ~RA, $IdB, Text4, Text5),
		AEnded($IdA, $IdB, ~RA, RB)
	]->
	[
		
	]

restriction RestrMisgeneratesOnlyOnce:
"All #i #j . MisgenerateOnlyOnce() @i & MisgenerateOnlyOnce() @j ==> #i = #j"

lemma mut_ts_functional: exists-trace
" Ex ida1 idb1 kab1 ra1 text41 text51 ida2 idb2 kab2 ra2 text42 text52 #i #j . 
	BSendTokenBA(ida1, idb1, kab1, ra1, idb1, text41, text51) @ i & ARecvTokenBA(ida2, idb2, kab2, ra2, idb2, text42, text52) @ j & not (Ex #r . 
	RevLtk(ida1) @ r) & not (Ex #r . 
	RevLtk(idb1) @ r) & not (Ex #r . 
	RevLtk(ida2) @ r) & not (Ex #r . 
	RevLtk(idb2) @ r) "

lemma agree_a:
" All ida idb ra rb #i . 
	AEnded(ida, idb, ra, rb) @ i ==> (Ex #j . 
	BEnded(ida, idb, ra, rb) @ j & j < i & not (Ex ida2 idb2 #i2 . 
	AEnded(ida2, idb2, ra, rb) @ i2 & not (#i = #i2))) | (Ex #r . 
	RevLtk(ida) @ r) | (Ex #r . 
	RevLtk(idb) @ r) "

lemma agree_b:
" All ida idb ra rb #i . 
	BEnded(ida, idb, ra, rb) @ i ==> (Ex #j . 
	AStarted(ida, idb, ra, rb) @ j & j < i & not (Ex ida2 idb2 #i2 . 
	BEnded(ida2, idb2, ra, rb) @ i2 & not (#i = #i2))) | (Ex #r . 
	RevLtk(ida) @ r) | (Ex #r . 
	RevLtk(idb) @ r) "

lemma noninj_agree_a:
" All ida idb ra rb #i . 
	AEnded(ida, idb, ra, rb) @ i ==> (Ex #j . 
	BEnded(ida, idb, ra, rb) @ j & j < i) | (Ex #r . 
	RevLtk(ida) @ r) | (Ex #r . 
	RevLtk(idb) @ r) "

lemma noninj_agree_b:
" All ida idb ra rb #i . 
	BEnded(ida, idb, ra, rb) @ i ==> (Ex #j . 
	AStarted(ida, idb, ra, rb) @ j & j < i) | (Ex #r . 
	RevLtk(ida) @ r) | (Ex #r . 
	RevLtk(idb) @ r) "


end
