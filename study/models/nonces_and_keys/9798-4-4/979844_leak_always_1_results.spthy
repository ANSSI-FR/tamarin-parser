theory ISO9798_4_4_979844_leak_always_1 begin

// Function signature and definition of the equational theory E

functions: fst/1, mac/2, pair/2, sid1_mut_cr/0, sid2_mut_cr/0, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2





rule (modulo E) GenRandom1:
   [ Fr( ~RA1 ) ] --> [ Out( ~RA1 ), Random1( ~RA1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) GenRandom0:
   [ Fr( ~RB0 ) ] --> [ Random0( ~RB0 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) CreateAssociation:
   [ In( <$IdA, $IdB> ), Fr( ~kAB ) ]
  -->
   [
   !RoleA( $IdA, $IdB, ~kAB ), !RoleB( $IdA, $IdB, ~kAB ),
   !Ltk( $IdA, ~kAB ), !Ltk( $IdB, ~kAB )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) RevLtk:
   [ !Ltk( A, k ) ] --[ RevLtk( A ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) CreateSession:
   [ !RoleA( $IdA, $IdB, ~kAB ), !RoleB( $IdA, $IdB, ~kAB ) ]
  -->
   [ StartA( $IdA, $IdB, ~kAB ), StartB( $IdA, $IdB, ~kAB ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) RoleB_1:
   [ StartB( $IdA, $IdB, ~kAB ), Random0( ~RB ), Fr( ~Text1 ) ]
  --[
  BSendElt( $IdA, $IdB, ~kAB, ~Text1, ~RB ), BStarted( $IdA, $IdB, ~RB )
  ]->
   [ Out( <~RB, ~Text1> ), Step1B( $IdA, $IdB, ~kAB, ~RB ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) RoleA_1:
   [
   StartA( $IdA, $IdB, ~kAB ), Random1( ~RA ), In( <RB, Text1> ),
   Fr( ~Text2 ), Fr( ~Text3 )
   ]
  --[
  ASendTokenAB( $IdA, $IdB, ~kAB, ~RA, RB, $IdB, ~Text3 ),
  AStarted( $IdA, $IdB, ~RA, RB )
  ]->
   [
   Out( <~RA, ~Text3, <sid1_mut_cr, ~RA, RB, $IdB, ~Text2>, 
         mac(<sid1_mut_cr, ~RA, RB, $IdB>, ~kAB)>
   ),
   Step1A( $IdA, $IdB, ~kAB, ~RA, RB, ~Text2, ~Text3 )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) RoleB_2:
   [
   Step1B( $IdA, $IdB, ~kAB, ~RB ),
   In( <RA, Text3, mac(<sid1_mut_cr, RA, ~RB, $IdB>, ~kAB)> ), Fr( ~Text4 ),
   Fr( ~Text5 )
   ]
  --[
  BRecvTokenAB( $IdA, $IdB, ~kAB, RA, ~RB, $IdB, Text3 ),
  BSendTokenBA( $IdA, $IdB, ~kAB, ~RB, RA, ~Text5 ),
  BEnded( $IdA, $IdB, RA, ~RB )
  ]->
   [ Out( <~Text5, mac(<sid2_mut_cr, ~RB, RA>, ~kAB)> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) RoleA_2:
   [
   Step1A( $IdA, $IdB, ~kAB, ~RA, RB, ~Text2, ~Text3 ),
   In( <Text5, mac(<sid2_mut_cr, RB, ~RA>, ~kAB)> )
   ]
  --[
  ARecvTokenBA( $IdA, $IdB, ~kAB, RB, ~RA, Text5 ),
  AEnded( $IdA, $IdB, ~RA, RB )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

restriction RestrEq:
  "∀ a b #i. (Eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

lemma mut_ts_functional:
  exists-trace
  "∃ ida1 idb1 kab1 ra1 rb1 text51 ida2 idb2 kab2 ra2 rb2 text52 #i #j.
    (((((BSendTokenBA( ida1, idb1, kab1, rb1, ra1, text51 ) @ #i) ∧
        (ARecvTokenBA( ida2, idb2, kab2, rb2, ra2, text52 ) @ #j)) ∧
       (¬(∃ #r. RevLtk( ida1 ) @ #r))) ∧
      (¬(∃ #r. RevLtk( idb1 ) @ #r))) ∧
     (¬(∃ #r. RevLtk( ida2 ) @ #r))) ∧
    (¬(∃ #r. RevLtk( idb2 ) @ #r))"
/*
guarded formula characterizing all satisfying traces:
"∃ ida1 idb1 kab1 ra1 rb1 text51 ida2 idb2 kab2 ra2 rb2 text52 #i #j.
  (BSendTokenBA( ida1, idb1, kab1, rb1, ra1, text51 ) @ #i) ∧
  (ARecvTokenBA( ida2, idb2, kab2, rb2, ra2, text52 ) @ #j)
 ∧
  (∀ #r. (RevLtk( ida1 ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( idb1 ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( ida2 ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( idb2 ) @ #r) ⇒ ⊥)"
*/
simplify
solve( Step1B( $IdA, $IdB, ~kAB, ~RB ) ▶₀ #i )
  case RoleB_1
  solve( Step1A( $IdA.1, $IdB.1, ~kAB.1, ~RA, rb2, ~Text2, ~Text3.1
         ) ▶₀ #j )
    case RoleA_1
    solve( !KU( mac(<sid1_mut_cr, ra1, ~RB, $IdB>, ~kAB) ) @ #vk.4 )
      case RoleA_1
      solve( !KU( mac(<sid2_mut_cr, rb2, ~RA.1>, ~kAB.1) ) @ #vk.7 )
        case RoleB_2
        solve( !KU( ~RB ) @ #vk.18 )
          case RoleB_1
          solve( !KU( ~RA ) @ #vk.6 )
            case GenRandom1
            solve( !KU( ~RA.1 ) @ #vk.21 )
              case GenRandom1
              solve( !KU( ~RB.1 ) @ #vk.15 )
                case RoleB_1
                solve( !KU( mac(<sid1_mut_cr, ~RA.1, ~RB.1, $IdB.1>, ~kAB.1) ) @ #vk.24 )
                  case RoleA_1
                  SOLVED // trace found
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma agree_a:
  all-traces
  "∀ ida idb ra rb #i.
    (AEnded( ida, idb, ra, rb ) @ #i) ⇒
    (((∃ #j.
        ((BEnded( ida, idb, ra, rb ) @ #j) ∧ (#j < #i)) ∧
        (¬(∃ ida2 idb2 #i2.
            (AEnded( ida2, idb2, ra, rb ) @ #i2) ∧ (¬(#i = #i2))))) ∨
      (∃ #r. RevLtk( ida ) @ #r)) ∨
     (∃ #r. RevLtk( idb ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ ida idb ra rb #i.
  (AEnded( ida, idb, ra, rb ) @ #i)
 ∧
  (∀ #j.
    (BEnded( ida, idb, ra, rb ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ ida2 idb2 #i2. (AEnded( ida2, idb2, ra, rb ) @ #i2) ∧ ¬(#i = #i2)))) ∧
  (∀ #r. (RevLtk( ida ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( idb ) @ #r) ⇒ ⊥)"
*/
simplify
solve( Step1A( $IdA, $IdB, ~kAB, ~RA, rb, ~Text2, ~Text3 ) ▶₀ #i )
  case RoleA_1
  solve( !KU( mac(<sid2_mut_cr, rb, ~RA>, ~kAB) ) @ #vk.2 )
    case RoleB_2
    solve( (#i < #i2)  ∥ (#i2 < #i) )
      case case_1
      solve( Step1A( $IdA.1, $IdB.1, ~kAB.1, ~RA, ~RB, ~Text2.1, ~Text3.1
             ) ▶₀ #i2 )
        case RoleA_1
        by contradiction /* cyclic */
      qed
    next
      case case_2
      solve( Step1A( $IdA.1, $IdB.1, ~kAB.1, ~RA, ~RB, ~Text2.1, ~Text3.1
             ) ▶₀ #i2 )
        case RoleA_1
        by contradiction /* cyclic */
      qed
    qed
  next
    case c_mac
    solve( !KU( ~kAB ) @ #vk.11 )
      case RevLtk_case_1
      by contradiction /* from formulas */
    next
      case RevLtk_case_2
      by contradiction /* from formulas */
    qed
  qed
qed

lemma agree_b:
  all-traces
  "∀ ida idb ra rb #i.
    (BEnded( ida, idb, ra, rb ) @ #i) ⇒
    (((∃ #j.
        ((AStarted( ida, idb, ra, rb ) @ #j) ∧ (#j < #i)) ∧
        (¬(∃ ida2 idb2 #i2.
            (BEnded( ida2, idb2, ra, rb ) @ #i2) ∧ (¬(#i = #i2))))) ∨
      (∃ #r. RevLtk( ida ) @ #r)) ∨
     (∃ #r. RevLtk( idb ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ ida idb ra rb #i.
  (BEnded( ida, idb, ra, rb ) @ #i)
 ∧
  (∀ #j.
    (AStarted( ida, idb, ra, rb ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ ida2 idb2 #i2. (BEnded( ida2, idb2, ra, rb ) @ #i2) ∧ ¬(#i = #i2)))) ∧
  (∀ #r. (RevLtk( ida ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( idb ) @ #r) ⇒ ⊥)"
*/
simplify
solve( Step1B( $IdA, $IdB, ~kAB, ~RB ) ▶₀ #i )
  case RoleB_1
  solve( !KU( mac(<sid1_mut_cr, ra, ~RB, $IdB>, ~kAB) ) @ #vk.4 )
    case RoleA_1
    solve( (#i < #i2)  ∥ (#i2 < #i) )
      case case_1
      solve( Step1B( $IdA.1, $IdB.1, ~kAB.1, ~RB ) ▶₀ #i2 )
        case RoleB_1
        by contradiction /* cyclic */
      qed
    next
      case case_2
      solve( Step1B( $IdA.1, $IdB.1, ~kAB.1, ~RB ) ▶₀ #i2 )
        case RoleB_1
        by contradiction /* cyclic */
      qed
    qed
  next
    case c_mac
    solve( !KU( ~kAB ) @ #vk.11 )
      case RevLtk_case_1
      by contradiction /* from formulas */
    next
      case RevLtk_case_2
      by contradiction /* from formulas */
    qed
  qed
qed

lemma noninj_agree_a:
  all-traces
  "∀ ida idb ra rb #i.
    (AEnded( ida, idb, ra, rb ) @ #i) ⇒
    (((∃ #j. (BEnded( ida, idb, ra, rb ) @ #j) ∧ (#j < #i)) ∨
      (∃ #r. RevLtk( ida ) @ #r)) ∨
     (∃ #r. RevLtk( idb ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ ida idb ra rb #i.
  (AEnded( ida, idb, ra, rb ) @ #i)
 ∧
  (∀ #j. (BEnded( ida, idb, ra, rb ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #r. (RevLtk( ida ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( idb ) @ #r) ⇒ ⊥)"
*/
simplify
solve( Step1A( $IdA, $IdB, ~kAB, ~RA, rb, ~Text2, ~Text3 ) ▶₀ #i )
  case RoleA_1
  solve( !KU( mac(<sid2_mut_cr, rb, ~RA>, ~kAB) ) @ #vk.2 )
    case RoleB_2
    by contradiction /* from formulas */
  next
    case c_mac
    solve( !KU( ~kAB ) @ #vk.11 )
      case RevLtk_case_1
      by contradiction /* from formulas */
    next
      case RevLtk_case_2
      by contradiction /* from formulas */
    qed
  qed
qed

lemma noninj_agree_b:
  all-traces
  "∀ ida idb ra rb #i.
    (BEnded( ida, idb, ra, rb ) @ #i) ⇒
    (((∃ #j. (AStarted( ida, idb, ra, rb ) @ #j) ∧ (#j < #i)) ∨
      (∃ #r. RevLtk( ida ) @ #r)) ∨
     (∃ #r. RevLtk( idb ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ ida idb ra rb #i.
  (BEnded( ida, idb, ra, rb ) @ #i)
 ∧
  (∀ #j. (AStarted( ida, idb, ra, rb ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #r. (RevLtk( ida ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( idb ) @ #r) ⇒ ⊥)"
*/
simplify
solve( Step1B( $IdA, $IdB, ~kAB, ~RB ) ▶₀ #i )
  case RoleB_1
  solve( !KU( mac(<sid1_mut_cr, ra, ~RB, $IdB>, ~kAB) ) @ #vk.4 )
    case RoleA_1
    by contradiction /* from formulas */
  next
    case c_mac
    solve( !KU( ~kAB ) @ #vk.11 )
      case RevLtk_case_1
      by contradiction /* from formulas */
    next
      case RevLtk_case_2
      by contradiction /* from formulas */
    qed
  qed
qed













/*
WARNING: the following wellformedness checks failed!

Restriction actions
===================

  restriction `RestrEq' references action 
    fact "Eq" (arity 2, Linear) 
  but no rule has such an action.
*/

/*
Generated from:
Tamarin version 1.10.0
Maude version 3.3
Git revision: UNKNOWN, branch: UNKNOWN
Compiled at: 2025-01-20 17:15:39.562956625 UTC
*/

end

==============================================================================
summary of summaries:

analyzed: 979844_leak_always_1.spthy

  processing time: 1.28s
  
  WARNING: 1 wellformedness check failed!
           The analysis results might be wrong!
  
  mut_ts_functional (exists-trace): verified (11 steps)
  agree_a (all-traces): verified (11 steps)
  agree_b (all-traces): verified (11 steps)
  noninj_agree_a (all-traces): verified (7 steps)
  noninj_agree_b (all-traces): verified (7 steps)

==============================================================================
