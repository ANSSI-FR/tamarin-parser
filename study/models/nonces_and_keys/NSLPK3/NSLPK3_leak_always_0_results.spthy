theory NSLPK3_NSLPK3_leak_always_0 begin

// Function signature and definition of the equational theory E

functions: adec/2, aenc/2, fst/1, pair/2, pk/1, snd/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2







rule (modulo E) GenNonce1:
   [ Fr( ~nr1 ) ] --> [ Nonce1( ~nr1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) GenNonce0:
   [ Fr( ~ni0 ) ] --> [ Out( ~ni0 ), Nonce0( ~ni0 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Register_pk:
   [ Fr( ~ltkA ) ]
  -->
   [ !Ltk( $A, ~ltkA ), !Pk( $A, pk(~ltkA) ), Out( pk(~ltkA) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_ltk:
   [ !Ltk( A, ltkA ) ] --[ RevLtk( A ) ]-> [ Out( ltkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_1:
   [ Nonce0( ~ni ), !Pk( $R, pkR ) ]
  --[ OUT_I_1( aenc(<'1', ~ni, $I>, pkR) ) ]->
   [ Out( aenc(<'1', ~ni, $I>, pkR) ), St_I_1( $I, $R, ~ni ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_1:
   [
   !Ltk( $R, ltkR ), In( aenc(<'1', ni, I>, pk(ltkR)) ), !Pk( I, pkI ),
   Nonce1( ~nr )
   ]
  --[
  IN_R_1_ni( ni, aenc(<'1', ni, I>, pk(ltkR)) ),
  OUT_R_1( aenc(<'2', ni, ~nr, $R>, pkI) ),
  RunningR( I, $R, <'init', ni, ~nr> )
  ]->
   [ Out( aenc(<'2', ni, ~nr, $R>, pkI) ), St_R_1( $R, I, ni, ~nr ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_2:
   [
   St_I_1( I, R, ni ), !Ltk( I, ltkI ),
   In( aenc(<'2', ni, nr, R>, pk(ltkI)) ), !Pk( R, pkR )
   ]
  --[
  IN_I_2_nr( nr, aenc(<'2', ni, nr, R>, pk(ltkI)) ),
  CommitI( I, R, <'init', ni, nr> ), RunningI( R, I, <'resp', ni, nr> ),
  SecretINr( I, R, nr ), SecretINi( I, R, ni )
  ]->
   [ Out( aenc(<'3', nr>, pkR) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_2:
   [
   St_R_1( R, I, ni, nr ), !Ltk( R, ltkR ), In( aenc(<'3', nr>, pk(ltkR)) )
   ]
  --[
  CommitR( R, I, <'resp', ni, nr> ), SecretRNr( R, I, nr ),
  SecretRNi( R, I, ni )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

lemma types [sources]:
  all-traces
  "(∀ ni m1 #i.
     (IN_R_1_ni( ni, m1 ) @ #i) ⇒
     ((∃ #j. (!KU( ni ) @ #j) ∧ (#j < #i)) ∨ (∃ #j. OUT_I_1( m1 ) @ #j))) ∧
   (∀ nr m2 #i.
     (IN_I_2_nr( nr, m2 ) @ #i) ⇒
     ((∃ #j. (!KU( nr ) @ #j) ∧ (#j < #i)) ∨ (∃ #j. OUT_R_1( m2 ) @ #j)))"
/*
guarded formula characterizing all counter-examples:
"((∃ ni m1 #i.
    (IN_R_1_ni( ni, m1 ) @ #i)
   ∧
    (∀ #j. (!KU( ni ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (OUT_I_1( m1 ) @ #j) ⇒ ⊥)) ∨
  (∃ nr m2 #i.
    (IN_I_2_nr( nr, m2 ) @ #i)
   ∧
    (∀ #j. (!KU( nr ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (OUT_R_1( m2 ) @ #j) ⇒ ⊥)))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∃ ni m1 #i.
           (IN_R_1_ni( ni, m1 ) @ #i)
          ∧
           (∀ #j. (!KU( ni ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j. (OUT_I_1( m1 ) @ #j) ⇒ ⊥))  ∥
         (∃ nr m2 #i.
           (IN_I_2_nr( nr, m2 ) @ #i)
          ∧
           (∀ #j. (!KU( nr ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j. (OUT_R_1( m2 ) @ #j) ⇒ ⊥)) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( ni ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (OUT_I_1( aenc(<'1', ni, I>, pk(ltkR)) ) @ #j) ∧ ¬(last(#j))) )
      case case_1
      solve( !Ltk( $R, ltkR ) ▶₀ #i )
        case Register_pk
        solve( !Pk( I, pkI ) ▶₂ #i )
          case Register_pk
          solve( Nonce1( ~nr ) ▶₃ #i )
            case GenNonce1
            solve( !KU( aenc(<'1', ni, $A>, pk(~ltkA)) ) @ #vk )
              case I_1
              by contradiction /* from formulas */
            next
              case I_2
              solve( (∃ #j. (!KU( nr.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3))  ∥
                     (∃ #j.
                       (OUT_R_1( aenc(<'2', ~ni.1, nr.1, $R.1>, pk(~ltkA.3)) ) @ #j)
                      ∧
                       ¬(last(#j))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case R_1
              solve( (∃ #j. (!KU( ni.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3))  ∥
                     (∃ #j.
                       (OUT_I_1( aenc(<'1', ni.1, $A.1>, pk(~ltkA.3)) ) @ #j) ∧ ¬(last(#j))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case c_aenc
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (last(#i))  ∥
           (∃ #j. (!KU( nr ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j.
             (OUT_R_1( aenc(<'2', ni, nr, R>, pk(ltkI)) ) @ #j) ∧ ¬(last(#j))) )
      case case_1
      solve( St_I_1( I, R, ni ) ▶₀ #i )
        case I_1
        solve( !Ltk( $I, ltkI ) ▶₁ #i )
          case Register_pk
          solve( !Pk( $R, pkR ) ▶₃ #i )
            case Register_pk
            solve( !KU( aenc(<'2', ~ni, nr, $R>, pk(~ltkA)) ) @ #vk )
              case I_2
              solve( (∃ #j. (!KU( nr.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                     (∃ #j.
                       (OUT_R_1( aenc(<'2', ~ni.1, nr.1, $R.1>, pk(~ltkA.4)) ) @ #j)
                      ∧
                       ¬(last(#j))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case R_1_case_1
              by contradiction /* from formulas */
            next
              case R_1_case_2
              solve( (∃ #j. (!KU( ni.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                     (∃ #j.
                       (OUT_I_1( aenc(<'1', ni.1, $A>, pk(~ltkA.4)) ) @ #j) ∧ ¬(last(#j))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                by contradiction /* impossible chain */
              qed
            next
              case c_aenc
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  qed
qed

lemma nonce_secrecy_I_Ni:
  all-traces
  "¬(∃ A B s #i.
      (((SecretINi( A, B, s ) @ #i) ∧ (∃ #j. K( s ) @ #j)) ∧
       (¬(∃ #r. RevLtk( A ) @ #r))) ∧
      (¬(∃ #r. RevLtk( B ) @ #r)))"
/*
guarded formula characterizing all counter-examples:
"∃ A B s #i.
  (SecretINi( A, B, s ) @ #i)
 ∧
  (∃ #j. (K( s ) @ #j)) ∧
  (∀ #r. (RevLtk( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( St_I_1( A, B, s ) ▶₀ #i )
  case I_1
  solve( !Ltk( $I, ltkI ) ▶₁ #i )
    case Register_pk
    solve( !Pk( $R, pkR ) ▶₃ #i )
      case Register_pk
      solve( !KU( aenc(<'2', ~ni, nr, $R>, pk(~ltkA)) ) @ #vk )
        case R_1
        solve( !KU( aenc(<'1', ~ni, $I>, pk(~ltkA.3)) ) @ #vk.2 )
          case I_1
          solve( !KU( ~ni ) @ #vk.2 )
            case GenNonce0
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

lemma nonce_secrecy_I_Nr:
  all-traces
  "¬(∃ A B s #i.
      (((SecretINr( A, B, s ) @ #i) ∧ (∃ #j. K( s ) @ #j)) ∧
       (¬(∃ #r. RevLtk( A ) @ #r))) ∧
      (¬(∃ #r. RevLtk( B ) @ #r)))"
/*
guarded formula characterizing all counter-examples:
"∃ A B s #i.
  (SecretINr( A, B, s ) @ #i)
 ∧
  (∃ #j. (K( s ) @ #j)) ∧
  (∀ #r. (RevLtk( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( St_I_1( A, B, ni ) ▶₀ #i )
  case I_1
  solve( !Ltk( $I, ltkI ) ▶₁ #i )
    case Register_pk
    solve( !Pk( $R, pkR ) ▶₃ #i )
      case Register_pk
      solve( !KU( aenc(<'2', ~ni, s, $R>, pk(~ltkA)) ) @ #vk )
        case c_aenc
        solve( !KU( ~ni ) @ #vk.7 )
          case GenNonce0
          solve( !KU( pk(~ltkA) ) @ #vk.6 )
            case Register_pk
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

lemma nonce_secrecy_R_Ni:
  all-traces
  "¬(∃ A B s #i.
      (((SecretRNi( A, B, s ) @ #i) ∧ (∃ #j. K( s ) @ #j)) ∧
       (¬(∃ #r. RevLtk( A ) @ #r))) ∧
      (¬(∃ #r. RevLtk( B ) @ #r)))"
/*
guarded formula characterizing all counter-examples:
"∃ A B s #i.
  (SecretRNi( A, B, s ) @ #i)
 ∧
  (∃ #j. (K( s ) @ #j)) ∧
  (∀ #r. (RevLtk( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( St_R_1( A, B, s, nr ) ▶₀ #i )
  case R_1
  solve( !Ltk( $R, ltkR ) ▶₁ #i )
    case Register_pk
    solve( !KU( aenc(<'3', ~nr>, pk(~ltkA)) ) @ #vk )
      case I_2
      solve( !KU( aenc(<'1', s, $A>, pk(~ltkA.1)) ) @ #vk.2 )
        case I_1
        solve( !KU( aenc(<'2', ~ni.1, ~nr, $R>, pk(~ltkA.3)) ) @ #vk.3 )
          case R_1
          solve( !KU( ~ni ) @ #vk.3 )
            case GenNonce0
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

lemma nonce_secrecy_R_Nr:
  all-traces
  "¬(∃ A B s #i.
      (((SecretRNr( A, B, s ) @ #i) ∧ (∃ #j. K( s ) @ #j)) ∧
       (¬(∃ #r. RevLtk( A ) @ #r))) ∧
      (¬(∃ #r. RevLtk( B ) @ #r)))"
/*
guarded formula characterizing all counter-examples:
"∃ A B s #i.
  (SecretRNr( A, B, s ) @ #i)
 ∧
  (∃ #j. (K( s ) @ #j)) ∧
  (∀ #r. (RevLtk( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( St_R_1( A, B, ni, s ) ▶₀ #i )
  case R_1
  solve( !Ltk( $R, ltkR ) ▶₁ #i )
    case Register_pk
    solve( !KU( ~nr ) @ #vk.1 )
      case I_2
      solve( !KU( ~ltkA.3 ) @ #vk.4 )
        case Reveal_ltk
        by contradiction /* from formulas */
      qed
    next
      case R_1
      solve( !KU( ~ltkA.2 ) @ #vk.3 )
        case Reveal_ltk
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma injective_agreeI:
  all-traces
  "∀ actor peer params #i.
    (CommitI( actor, peer, params ) @ #i) ⇒
    (((∃ #j.
        ((RunningR( actor, peer, params ) @ #j) ∧ (#j < #i)) ∧
        (¬(∃ actor2 peer2 #i2.
            (CommitI( actor2, peer2, params ) @ #i2) ∧ (¬(#i = #i2))))) ∨
      (∃ #r. RevLtk( actor ) @ #r)) ∨
     (∃ #r. RevLtk( peer ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ actor peer params #i.
  (CommitI( actor, peer, params ) @ #i)
 ∧
  (∀ #j.
    (RunningR( actor, peer, params ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ actor2 peer2 #i2.
       (CommitI( actor2, peer2, params ) @ #i2) ∧ ¬(#i = #i2)))) ∧
  (∀ #r. (RevLtk( actor ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( peer ) @ #r) ⇒ ⊥)"
*/
simplify
solve( St_I_1( actor, peer, ni ) ▶₀ #i )
  case I_1
  solve( !Ltk( $I, ltkI ) ▶₁ #i )
    case Register_pk
    solve( !Pk( $R, pkR ) ▶₃ #i )
      case Register_pk
      solve( !KU( aenc(<'2', ~ni, nr, $R>, pk(~ltkA)) ) @ #vk )
        case c_aenc
        solve( !KU( ~ni ) @ #vk.5 )
          case GenNonce0
          solve( !KU( pk(~ltkA) ) @ #vk.3 )
            case Register_pk
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

lemma injective_agreeR:
  all-traces
  "∀ actor peer params #i.
    (CommitR( actor, peer, params ) @ #i) ⇒
    (((∃ #j.
        ((RunningI( actor, peer, params ) @ #j) ∧ (#j < #i)) ∧
        (¬(∃ actor2 peer2 #i2.
            (CommitR( actor2, peer2, params ) @ #i2) ∧ (¬(#i = #i2))))) ∨
      (∃ #r. RevLtk( actor ) @ #r)) ∨
     (∃ #r. RevLtk( peer ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ actor peer params #i.
  (CommitR( actor, peer, params ) @ #i)
 ∧
  (∀ #j.
    (RunningI( actor, peer, params ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ actor2 peer2 #i2.
       (CommitR( actor2, peer2, params ) @ #i2) ∧ ¬(#i = #i2)))) ∧
  (∀ #r. (RevLtk( actor ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( peer ) @ #r) ⇒ ⊥)"
*/
simplify
solve( St_R_1( actor, peer, ni, nr ) ▶₀ #i )
  case R_1
  solve( !Ltk( $R, ltkR ) ▶₁ #i )
    case Register_pk
    solve( !KU( aenc(<'3', ~nr>, pk(~ltkA)) ) @ #vk )
      case I_2
      solve( !KU( aenc(<'1', ni, $A>, pk(~ltkA.1)) ) @ #vk.1 )
        case I_1
        solve( !KU( aenc(<'2', ~ni.1, ~nr, $R>, pk(~ltkA.3)) ) @ #vk.2 )
          case R_1
          solve( (#i < #i2)  ∥ (#i2 < #i) )
            case case_1
            solve( St_R_1( actor2, peer2, ~ni, ~nr ) ▶₀ #i2 )
              case R_1
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( St_R_1( actor2, peer2, ~ni, ~nr ) ▶₀ #i2 )
              case R_1
              by contradiction /* cyclic */
            qed
          qed
        next
          case c_aenc
          solve( !KU( ~nr ) @ #vk.9 )
            case I_2
            solve( (#i < #i2)  ∥ (#i2 < #i) )
              case case_1
              solve( St_R_1( actor2, peer2, ~ni, ~nr ) ▶₀ #i2 )
                case R_1
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( St_R_1( actor2, peer2, ~ni, ~nr ) ▶₀ #i2 )
                case R_1
                by contradiction /* cyclic */
              qed
            qed
          next
            case R_1
            solve( !KU( ~ltkA.2 ) @ #vk.11 )
              case Reveal_ltk
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_aenc
        solve( !KU( aenc(<'2', ~ni.1, ~nr, $R>, pk(~ltkA.3)) ) @ #vk.2 )
          case R_1
          solve( (#i < #i2)  ∥ (#i2 < #i) )
            case case_1
            solve( St_R_1( actor2, peer2, ~ni, ~nr ) ▶₀ #i2 )
              case R_1
              by contradiction /* cyclic */
            qed
          next
            case case_2
            solve( St_R_1( actor2, peer2, ~ni, ~nr ) ▶₀ #i2 )
              case R_1
              by contradiction /* cyclic */
            qed
          qed
        next
          case c_aenc
          solve( !KU( ~nr ) @ #vk.15 )
            case I_2
            solve( (#i < #i2)  ∥ (#i2 < #i) )
              case case_1
              solve( St_R_1( actor2, peer2, ~ni, ~nr ) ▶₀ #i2 )
                case R_1
                by contradiction /* cyclic */
              qed
            next
              case case_2
              solve( St_R_1( actor2, peer2, ~ni, ~nr ) ▶₀ #i2 )
                case R_1
                by contradiction /* cyclic */
              qed
            qed
          next
            case R_1
            solve( !KU( ~ltkA.2 ) @ #vk.17 )
              case Reveal_ltk
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case c_aenc
      solve( !KU( ~nr ) @ #vk.5 )
        case I_2
        solve( (#i < #i2)  ∥ (#i2 < #i) )
          case case_1
          solve( St_R_1( actor2, peer2, ~ni, ~nr ) ▶₀ #i2 )
            case R_1
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( St_R_1( actor2, peer2, ~ni, ~nr ) ▶₀ #i2 )
            case R_1
            by contradiction /* cyclic */
          qed
        qed
      next
        case R_1
        solve( !KU( ~ltkA.2 ) @ #vk.6 )
          case Reveal_ltk
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma non_injective_agreeI:
  all-traces
  "∀ actor peer params #i.
    (CommitI( actor, peer, params ) @ #i) ⇒
    (((∃ #j. (RunningR( actor, peer, params ) @ #j) ∧ (#j < #i)) ∨
      (∃ #r. RevLtk( actor ) @ #r)) ∨
     (∃ #r. RevLtk( peer ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ actor peer params #i.
  (CommitI( actor, peer, params ) @ #i)
 ∧
  (∀ #j. (RunningR( actor, peer, params ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #r. (RevLtk( actor ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( peer ) @ #r) ⇒ ⊥)"
*/
simplify
solve( St_I_1( actor, peer, ni ) ▶₀ #i )
  case I_1
  solve( !Ltk( $I, ltkI ) ▶₁ #i )
    case Register_pk
    solve( !Pk( $R, pkR ) ▶₃ #i )
      case Register_pk
      solve( !KU( aenc(<'2', ~ni, nr, $R>, pk(~ltkA)) ) @ #vk )
        case c_aenc
        solve( !KU( ~ni ) @ #vk.5 )
          case GenNonce0
          solve( !KU( pk(~ltkA) ) @ #vk.3 )
            case Register_pk
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

lemma non_injective_agreeR:
  all-traces
  "∀ actor peer params #i.
    (CommitR( actor, peer, params ) @ #i) ⇒
    (((∃ #j. (RunningI( actor, peer, params ) @ #j) ∧ (#j < #i)) ∨
      (∃ #r. RevLtk( actor ) @ #r)) ∨
     (∃ #r. RevLtk( peer ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ actor peer params #i.
  (CommitR( actor, peer, params ) @ #i)
 ∧
  (∀ #j. (RunningI( actor, peer, params ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #r. (RevLtk( actor ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( peer ) @ #r) ⇒ ⊥)"
*/
simplify
solve( St_R_1( actor, peer, ni, nr ) ▶₀ #i )
  case R_1
  solve( !Ltk( $R, ltkR ) ▶₁ #i )
    case Register_pk
    solve( !KU( aenc(<'3', ~nr>, pk(~ltkA)) ) @ #vk )
      case I_2
      solve( !KU( aenc(<'1', ni, $A>, pk(~ltkA.1)) ) @ #vk.1 )
        case I_1
        solve( !KU( aenc(<'2', ~ni.1, ~nr, $R>, pk(~ltkA.3)) ) @ #vk.2 )
          case R_1
          by contradiction /* from formulas */
        next
          case c_aenc
          solve( !KU( ~nr ) @ #vk.9 )
            case I_2
            by contradiction /* from formulas */
          next
            case R_1
            solve( !KU( ~ltkA.2 ) @ #vk.11 )
              case Reveal_ltk
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_aenc
        solve( !KU( aenc(<'2', ~ni.1, ~nr, $R>, pk(~ltkA.3)) ) @ #vk.2 )
          case R_1
          by contradiction /* from formulas */
        next
          case c_aenc
          solve( !KU( ~nr ) @ #vk.15 )
            case I_2
            by contradiction /* from formulas */
          next
            case R_1
            solve( !KU( ~ltkA.2 ) @ #vk.17 )
              case Reveal_ltk
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case c_aenc
      solve( !KU( ~nr ) @ #vk.5 )
        case I_2
        by contradiction /* from formulas */
      next
        case R_1
        solve( !KU( ~ltkA.2 ) @ #vk.6 )
          case Reveal_ltk
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma session_key_setup_possible:
  exists-trace
  "∃ A B s #i.
    ((SecretINi( A, B, s ) @ #i) ∧ (¬(∃ #r. RevLtk( A ) @ #r))) ∧
    (¬(∃ #r. RevLtk( B ) @ #r))"
/*
guarded formula characterizing all satisfying traces:
"∃ A B s #i.
  (SecretINi( A, B, s ) @ #i)
 ∧
  (∀ #r. (RevLtk( A ) @ #r) ⇒ ⊥) ∧ (∀ #r. (RevLtk( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( St_I_1( A, B, s ) ▶₀ #i )
  case I_1
  solve( !Ltk( $I, ltkI ) ▶₁ #i )
    case Register_pk
    solve( !Pk( $R, pkR ) ▶₃ #i )
      case Register_pk
      solve( !KU( aenc(<'2', ~ni, nr, $R>, pk(~ltkA)) ) @ #vk )
        case R_1
        solve( !KU( aenc(<'1', ~ni, $I>, pk(~ltkA.3)) ) @ #vk.1 )
          case I_1
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed













/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.10.0
Maude version 3.3
Git revision: UNKNOWN, branch: UNKNOWN
Compiled at: 2025-01-20 17:15:39.562956625 UTC
*/

end

==============================================================================
summary of summaries:

analyzed: NSLPK3_leak_always_0.spthy

  processing time: 1.20s
  
  types (all-traces): verified (34 steps)
  nonce_secrecy_I_Ni (all-traces): falsified - found trace (8 steps)
  nonce_secrecy_I_Nr (all-traces): falsified - found trace (8 steps)
  nonce_secrecy_R_Ni (all-traces): falsified - found trace (8 steps)
  nonce_secrecy_R_Nr (all-traces): verified (8 steps)
  injective_agreeI (all-traces): falsified - found trace (8 steps)
  injective_agreeR (all-traces): verified (41 steps)
  non_injective_agreeI (all-traces): falsified - found trace (8 steps)
  non_injective_agreeR (all-traces): verified (21 steps)
  session_key_setup_possible (exists-trace): verified (7 steps)

==============================================================================
